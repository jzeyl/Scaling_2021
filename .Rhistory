lineplot<-ggplot()+
geom_richtext(aes(x =c(0,10), y = c(0,10)),
label = "**b: 1** (mm~mm,mm<sup>2</sup>~mm<sup>2</sup>,mm<sup>3</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,10)),
label = "b:1",
hjust = 0.6, vjust = -0.2)+
#0.6
geom_richtext(aes(x = c(0,10), y = c(0,6.6)),
label = "**b: 0.66** (mm<sup>2</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,6.6)),
label = "b:0.66",
hjust = 0.6, vjust = -0.2)+
#0.5
geom_richtext(aes(x = c(0,10), y = c(0,5)),
label = "**b: 0.5** (mm~mm<sup>2</sup>))", hjust = 0)+
geom_textpath(aes(x = c(0,10), y =  c(0,5)),
label = "b:0.5",
hjust = 0.6, vjust = -0.2)+
#3.3
geom_richtext(aes(x = c(0,10), y =  c(0,3.3)),
label = "**b: 0.33** (mm~mm<sup>3</sup>,g)" , hjust = 0)+
geom_path(aes(x = c(0,10), y =  c(0,3.3)))+
#0
geom_textpath(aes(x = c(0,10), y = c(0,3.3)),
label = "b:0.33",
hjust = 0.6, vjust = -0.2)+
#angle vs 3D
geom_path(aes(x = c(0,10), y = c(0,0)))+
geom_textpath(aes(x = c(0,10), y = c(0,0)),
label = "b:0.0",
hjust = 0.6, vjust = -0.2)+
geom_richtext(aes(x = c(0,10), y = c(0,0)),
label = "**b: 0.0** (degree~mm<sup>3</sup>,g)" , hjust = 0)+
#themes, scales
theme_minimal()+
ylab("log(y)")+
xlab("log(x)")+
scale_x_continuous(limits = c(0,20))+
scale_y_continuous(limits = c(0,10))+
coord_fixed(ratio = 1, clip = "off")+
theme(axis.text = element_text(colour = "black"))
lineplot
lineplot<-ggplot()+
geom_richtext(aes(x =c(10), y = c(10)),
label = "**b: 1** (mm~mm,mm<sup>2</sup>~mm<sup>2</sup>,mm<sup>3</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,10)),
label = "b:1",
hjust = 0.6, vjust = -0.2)+
#0.6
geom_richtext(aes(x = c(10), y = c(6.6)),
label = "**b: 0.66** (mm<sup>2</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,6.6)),
label = "b:0.66",
hjust = 0.6, vjust = -0.2)+
#0.5
geom_richtext(aes(x = c(10), y = c(5)),
label = "**b: 0.5** (mm~mm<sup>2</sup>))", hjust = 0)+
geom_textpath(aes(x = c(0,10), y =  c(0,5)),
label = "b:0.5",
hjust = 0.6, vjust = -0.2)+
#3.3
geom_richtext(aes(x = c(10), y =  c(3.3)),
label = "**b: 0.33** (mm~mm<sup>3</sup>,g)" , hjust = 0)+
geom_path(aes(x = c(0,10), y =  c(0,3.3)))+
#0
geom_textpath(aes(x = c(0,10), y = c(0,3.3)),
label = "b:0.33",
hjust = 0.6, vjust = -0.2)+
#angle vs 3D
geom_path(aes(x = c(0,10), y = c(0,0)))+
geom_textpath(aes(x = c(0,10), y = c(0,0)),
label = "b:0.0",
hjust = 0.6, vjust = -0.2)+
geom_richtext(aes(x = c(10), y = c(0)),
label = "**b: 0.0** (degree~mm<sup>3</sup>,g)" , hjust = 0)+
#themes, scales
theme_minimal()+
ylab("log(y)")+
xlab("log(x)")+
scale_x_continuous(limits = c(0,20))+
scale_y_continuous(limits = c(0,10))+
coord_fixed(ratio = 1, clip = "off")+
theme(axis.text = element_text(colour = "black"))
lineplot
?coord_fixed
lineplot<-ggplot()+
geom_richtext(aes(x =c(10), y = c(10)),
label = "**b: 1** (mm~mm,mm<sup>2</sup>~mm<sup>2</sup>,mm<sup>3</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,10)),
label = "b:1",
hjust = 0.6, vjust = -0.2)+
#0.6
geom_richtext(aes(x = c(10), y = c(6.6)),
label = "**b: 0.66** (mm<sup>2</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,6.6)),
label = "b:0.66",
hjust = 0.6, vjust = -0.2)+
#0.5
geom_richtext(aes(x = c(10), y = c(5)),
label = "**b: 0.5** (mm~mm<sup>2</sup>))", hjust = 0)+
geom_textpath(aes(x = c(0,10), y =  c(0,5)),
label = "b:0.5",
hjust = 0.6, vjust = -0.2)+
#3.3
geom_richtext(aes(x = c(10), y =  c(3.3)),
label = "**b: 0.33** (mm~mm<sup>3</sup>,g)" , hjust = 0)+
geom_path(aes(x = c(0,10), y =  c(0,3.3)))+
#0
geom_textpath(aes(x = c(0,10), y = c(0,3.3)),
label = "b:0.33",
hjust = 0.6, vjust = -0.2)+
#angle vs 3D
geom_path(aes(x = c(0,10), y = c(0,0)))+
geom_textpath(aes(x = c(0,10), y = c(0,0)),
label = "b:0.0",
hjust = 0.6, vjust = -0.2)+
geom_richtext(aes(x = c(10), y = c(0)),
label = "**b: 0.0** (degree~mm<sup>3</sup>,g)" , hjust = 0)+
#themes, scales
theme_minimal()+
ylab("log(y)")+
xlab("log(x)")+
scale_x_continuous(limits = c(0,20))+
scale_y_continuous(limits = c(0,10))+
coord_fixed(ratio = 0.5, clip = "off")+
theme(axis.text = element_text(colour = "black"))
lineplot
inset+lineplot+plot_layout(widths = c(1,2))+
plot_annotation(tag_levels = 'A')
lineplot<-ggplot()+
geom_richtext(aes(x =c(10), y = c(10)),
label = "**b: 1** (mm~mm,mm<sup>2</sup>~mm<sup>2</sup>,mm<sup>3</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,10)),
label = "b:1",
hjust = 0.6, vjust = -0.2)+
#0.6
geom_richtext(aes(x = c(10), y = c(6.6)),
label = "**b: 0.66** (mm<sup>2</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,6.6)),
label = "b:0.66",
hjust = 0.6, vjust = -0.2)+
#0.5
geom_richtext(aes(x = c(10), y = c(5)),
label = "**b: 0.5** (mm~mm<sup>2</sup>))", hjust = 0)+
geom_textpath(aes(x = c(0,10), y =  c(0,5)),
label = "b:0.5",
hjust = 0.6, vjust = -0.2)+
#3.3
geom_richtext(aes(x = c(10), y =  c(3.3)),
label = "**b: 0.33** (mm~mm<sup>3</sup>,g)" , hjust = 0)+
geom_path(aes(x = c(0,10), y =  c(0,3.3)))+
#0
geom_textpath(aes(x = c(0,10), y = c(0,3.3)),
label = "b:0.33",
hjust = 0.6, vjust = -0.2)+
#angle vs 3D
geom_path(aes(x = c(0,10), y = c(0,0)))+
geom_textpath(aes(x = c(0,10), y = c(0,0)),
label = "b:0.0",
hjust = 0.6, vjust = -0.2)+
geom_richtext(aes(x = c(10), y = c(0)),
label = "**b: 0.0** (degree~mm<sup>3</sup>,g)" , hjust = 0)+
#themes, scales
theme_minimal()+
ylab("log(y)")+
xlab("log(x)")+
scale_x_continuous(limits = c(0,20))+
scale_y_continuous(limits = c(0,10))+
coord_fixed(ratio = 1, clip = "off")+
theme(axis.text = element_text(colour = "black"))
lineplot
inset+lineplot+plot_layout(widths = c(1,2))+
plot_annotation(tag_levels = 'A')
ggsave(file=paste0(choose.dir(),"/scalingtypes_apr 8.svg"),
width=10, height=5)
ggsave(file=paste0(choose.dir(),"/scalingtypes_apr 8.svg"),
width=10, height=5)
library(patchwork)
library(ggplot2)
library(ggtext)
library(geomtextpath)
lineplot<-ggplot()+
geom_richtext(aes(x =c(10), y = c(10)),
label = "**b: 1** (mm~mm,mm<sup>2</sup>~mm<sup>2</sup>,mm<sup>3</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,10)),
label = "b:1",
hjust = 0.6, vjust = -0.2)+
#0.6
geom_richtext(aes(x = c(10), y = c(6.6)),
label = "**b: 0.66** (mm<sup>2</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,6.6)),
label = "b:0.66",
hjust = 0.6, vjust = -0.2)+
#0.5
geom_richtext(aes(x = c(10), y = c(5)),
label = "**b: 0.5** (mm~mm<sup>2</sup>))", hjust = 0)+
geom_textpath(aes(x = c(0,10), y =  c(0,5)),
label = "b:0.5",
hjust = 0.6, vjust = -0.2)+
#3.3
geom_richtext(aes(x = c(10), y =  c(3.3)),
label = "**b: 0.33** (mm~mm<sup>3</sup>,g)" , hjust = 0)+
geom_path(aes(x = c(0,10), y =  c(0,3.3)))+
#0
geom_textpath(aes(x = c(0,10), y = c(0,3.3)),
label = "b:0.33",
hjust = 0.6, vjust = -0.2)+
#angle vs 3D
geom_path(aes(x = c(0,10), y = c(0,0)))+
geom_textpath(aes(x = c(0,10), y = c(0,0)),
label = "b:0.0",
hjust = 0.6, vjust = -0.2)+
geom_richtext(aes(x = c(10), y = c(0)),
label = "**b: 0.0** (degree~mm<sup>3</sup>,g)" , hjust = 0)+
#themes, scales
theme_minimal()+
ylab("log(y)")+
xlab("log(x)")+
scale_x_continuous(limits = c(0,20))+
scale_y_continuous(limits = c(0,10))+
coord_fixed(ratio = 1, clip = "off")+
theme(axis.text = element_text(colour = "black"))
lineplot
#geom_textabline(slope = 15, intercept = -100, label = "partition line",
#                color = "green4", hjust = 0.6, vjust = -0.2)
# hypo-hyper-iso ----------------------------------------------------------
inset<-ggplot()+
geom_textpath(aes(x = c(0,10), y = c(0,10)), label = "Isometric",
hjust = 0.6, vjust = -0.2)+
geom_textpath(aes(x = c(0,5), y = c(0,10)), col = "black",  label = "Hyperallometric",
hjust = 0.6, vjust = -0.2)+
geom_textpath(aes(x = c(0,10), y = c(0,5)), col = "black",  label = "Hypoallometric",
hjust = 0.6, vjust = -0.2)+
theme_minimal()+
ylab("log(y)")+
xlab("log(x)")+
scale_x_continuous(limits = c(0,10))+
scale_y_continuous(limits = c(0,10))+
coord_fixed(ratio = 1, clip = "off")+
theme(axis.text = element_text(colour = "black"))
inset
inset+lineplot+plot_layout(widths = c(1,2))+
plot_annotation(tag_levels = 'A')
types<-ggplot()+
geom_textpath(aes(x = c(0,10), y = c(0,10)), label = "Isometric",
hjust = 0.6, vjust = -0.2)+
geom_textpath(aes(x = c(0,5), y = c(0,10)), col = "black",  label = "Hyperallometric",
hjust = 0.6, vjust = -0.2)+
geom_textpath(aes(x = c(0,10), y = c(0,5)), col = "black",  label = "Hypoallometric",
hjust = 0.6, vjust = -0.2)+
theme_minimal()+
ylab("log(y)")+
xlab("log(x)")+
scale_x_continuous(limits = c(0,10))+
scale_y_continuous(limits = c(0,10))+
coord_fixed(ratio = 1, clip = "off")+
theme(axis.text = element_text(colour = "black"))
types
multidimensions<-ggplot()+
geom_richtext(aes(x =c(10), y = c(10)),
label = "**b: 1** (mm~mm,mm<sup>2</sup>~mm<sup>2</sup>,mm<sup>3</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,10)),
label = "b:1",
hjust = 0.6, vjust = -0.2)+
#0.6
geom_richtext(aes(x = c(10), y = c(6.6)),
label = "**b: 0.66** (mm<sup>2</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,6.6)),
label = "b:0.66",
hjust = 0.6, vjust = -0.2)+
#0.5
geom_richtext(aes(x = c(10), y = c(5)),
label = "**b: 0.5** (mm~mm<sup>2</sup>))", hjust = 0)+
geom_textpath(aes(x = c(0,10), y =  c(0,5)),
label = "b:0.5",
hjust = 0.6, vjust = -0.2)+
#3.3
geom_richtext(aes(x = c(10), y =  c(3.3)),
label = "**b: 0.33** (mm~mm<sup>3</sup>,g)" , hjust = 0)+
geom_path(aes(x = c(0,10), y =  c(0,3.3)))+
#0
geom_textpath(aes(x = c(0,10), y = c(0,3.3)),
label = "b:0.33",
hjust = 0.6, vjust = -0.2)+
#angle vs 3D
geom_path(aes(x = c(0,10), y = c(0,0)))+
geom_textpath(aes(x = c(0,10), y = c(0,0)),
label = "b:0.0",
hjust = 0.6, vjust = -0.2)+
geom_richtext(aes(x = c(10), y = c(0)),
label = "**b: 0.0** (degree~mm<sup>3</sup>,g)" , hjust = 0)+
#themes, scales
theme_minimal()+
ylab("log(y)")+
xlab("log(x)")+
scale_x_continuous(limits = c(0,20), breaks = c(0,10, by = 2.5))+
scale_y_continuous(limits = c(0,10))+
coord_fixed(ratio = 1, clip = "off")+
theme(axis.text = element_text(colour = "black"))
multidimensions
seq(50, 350, by = 2.5)
seq(0,10, by = 2.5)
multidimensions<-ggplot()+
geom_richtext(aes(x =c(10), y = c(10)),
label = "**b: 1** (mm~mm,mm<sup>2</sup>~mm<sup>2</sup>,mm<sup>3</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,10)),
label = "b:1",
hjust = 0.6, vjust = -0.2)+
#0.6
geom_richtext(aes(x = c(10), y = c(6.6)),
label = "**b: 0.66** (mm<sup>2</sup>~mm<sup>3</sup>,g)", hjust = 0)+
geom_textpath(aes(x = c(0,10), y = c(0,6.6)),
label = "b:0.66",
hjust = 0.6, vjust = -0.2)+
#0.5
geom_richtext(aes(x = c(10), y = c(5)),
label = "**b: 0.5** (mm~mm<sup>2</sup>))", hjust = 0)+
geom_textpath(aes(x = c(0,10), y =  c(0,5)),
label = "b:0.5",
hjust = 0.6, vjust = -0.2)+
#3.3
geom_richtext(aes(x = c(10), y =  c(3.3)),
label = "**b: 0.33** (mm~mm<sup>3</sup>,g)" , hjust = 0)+
geom_path(aes(x = c(0,10), y =  c(0,3.3)))+
#0
geom_textpath(aes(x = c(0,10), y = c(0,3.3)),
label = "b:0.33",
hjust = 0.6, vjust = -0.2)+
#angle vs 3D
geom_path(aes(x = c(0,10), y = c(0,0)))+
geom_textpath(aes(x = c(0,10), y = c(0,0)),
label = "b:0.0",
hjust = 0.6, vjust = -0.2)+
geom_richtext(aes(x = c(10), y = c(0)),
label = "**b: 0.0** (degree~mm<sup>3</sup>,g)" , hjust = 0)+
#themes, scales
theme_minimal()+
ylab("log(y)")+
xlab("log(x)")+
scale_x_continuous(limits = c(0,20), breaks = seq(0,10, by = 2.5))+
scale_y_continuous(limits = c(0,10))+
coord_fixed(ratio = 1, clip = "off")+
theme(axis.text = element_text(colour = "black"))
multidimensions
types+multidimensions+plot_layout(widths = c(1,2))+
plot_annotation(tag_levels = 'A')
ggsave(file=paste0(choose.dir(),"/scalingtypes_apr 8.svg"),
width=10, height=5)
library(ggtext)
library(caper)
library(phytools)
library(ape)
library(dplyr)
library(ggpubr)
library(ggplot2)
library(tidyr)
library(purrr)
################Set up data############
#set working directory and load data
setwd(choose.dir())
#load main dataframe
df<-read.csv("databmadded.csv", stringsAsFactors = F, header = T) #, stringsAsFactors = FALSE
#The pgls model function, which will be applied to list of formulas
pgls_models<-function(i){
pglsfit<-pgls(as.formula(i), data = birdCDO, #check comparative data object here<---
lambda = 'ML', #find lambda using maximum likelihood
bounds = list(lambda=c(0.0001,1)))#####
}
#Load phylogeny and correct names that were different between birdtree.org and the up-to-date species names
source("load phylogeny and make CDO.R")
df$HM#without imputed values
source("SW_HM_.R")#add phylogeny here
df$HM#with imputed values
print(summary(pglsfit))
df$HM
distinctdf$HM
pglsfit<-pgls(log(distinctdf$HM)~log(distinctdf$Skull.width..mm.), data = birdCDO, #check comparative data object here<---
lambda = 'ML', #find lambda using maximum likelihood
bounds = list(lambda=c(0.00001,1)))
print(summary(pglsfit))
print(summary(pglsfit))
pgls(log(distinctdf$HM)~log(distinctdf$Skull.width..mm.), data = birdCDO, #check comparative data object here<---
lambda = 'ML', #find lambda using maximum likelihood
bounds = list(lambda=c(0.00001,1)))
names(birdCDO)
names(birdCDO$data)
pglsfit<-pgls(log(HM)~log(Skull.width..mm.), data = birdCDO, #check comparative data object here<---
lambda = 'ML', #find lambda using maximum likelihood
bounds = list(lambda=c(0.00001,1)))
print(summary(pglsfit))
str(birdCDO)
birdCDO$phy
birdCDO$phy$tip.label
birdCDO$data$Birdtree
setdiff(birdCDO$data$Birdtree,birdCDO$phy$tip.label)
birdtree<-read.tree("JZ tree Prum merged hackett.tree")
birdtree
birdtree<-drop.tip(birdtree,c("Alle_alle","Phalacrocorax_auritus"))
birdtree$tip.label<-as.character(birdtree$tip.label)
birdtree$tip.label
birdtreels<-birdtree
distinctdf<-distinct(df, Binomial, .keep_all = TRUE)
distinctdforder<-arrange(distinctdf,Binomial)
#make 'distinct df', with only one species per line, and append variables back onto avgdf
distinctdf<-distinct(df, Binomial, .keep_all = TRUE)
distinctdforder<-arrange(distinctdf,Binomial)
#put current correct binomials on the tree, updated from the birdtree
new<-cbind.data.frame(birdtreels$tip.label,distinctdf$Binomial,gsub(" ","_",distinctdf$Birdtree))
colnames(new)<-c("tiplabel","binomial","birdtree")
#View(new)
match(new$tiplabel,new$birdtree)#get ordered with correct binomials
new$binomialordered<-new$binomial[match(new$tiplabel,new$birdtree)]
str(new)
str(new$binomialordered)
str(birdtreels$tip.label)
birdtreels$tip.label<-new$binomialordered
birdtreels$tip.label<-as.character(birdtreels$tip.label)
#make comparative data object for caper
birdCDO<-comparative.data(phy = birdtreels,data = distinctdf, #avgdf[avgdf$Category!="Terrestrial",]
names.col = Binomial,
vcv = TRUE, na.omit = FALSE,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
View(birdCDO$data)
names(birdCDO)
names(birdCDO$data)
nrow(birdCDO$data)
row.names(birdCDO$data)
birdCDO$phy$tip.label %in% row.names(birdCDO$data)
df$HM#w
source("SW_HM_.R")#add phylogeny here
df$HM#with imputed values
library(caper)
library(phytools)
library(ape)
library(dplyr)
library(ggpubr)
library(ggplot2)
library(tidyr)
library(purrr)
################Set up data############
#set working directory and load data
setwd(choose.dir())
#load main dataframe
df<-read.csv("databmadded.csv", stringsAsFactors = F, header = T) #, stringsAsFactors = FALSE
#The pgls model function, which will be applied to list of formulas
pgls_models<-function(i){
pglsfit<-pgls(as.formula(i), data = birdCDO, #check comparative data object here<---
lambda = 'ML', #find lambda using maximum likelihood
bounds = list(lambda=c(0.0001,1)))#####
}
#Load phylogeny and correct names that were different between birdtree.org and the up-to-date species names
source("load phylogeny and make CDO.R")
#Some missing headmass values to be imputed using PGLS of skull width and head mass
#Computed head mass from head mass~skullwidth pgls
df$HM#without imputed values
source("SW_HM_.R")#add phylogeny here
df$HM#with imputed values
#Since PGLS uses one point per species,I make the dataframe to have average values for species with more than one specimen:
#First I make a dataframe with only one species per line
distinctdf<-distinct(df, Binomial, .keep_all = TRUE)
distinctdforder<-arrange(distinctdf,Binomial)#sort by species name
#Next get averages by species for columns with continuous data
avgdf<-df %>% group_by(Binomial) %>%
summarise_at(vars(Skull.width..mm.:TM_FP),mean, na.rm = TRUE)
avgdf<-as.data.frame(avgdf)
#Columns from the distinctdf dataframe which don't require averaging are added back
avgdf$Species<-distinctdforder$Species
avgdf$Low.Hz<-distinctdforder$Low.Hz
avgdf$Order<-distinctdforder$Order
avgdf$Family<-distinctdforder$Family
avgdf$maxdivedepth<-distinctdforder$max
avgdf$Category<-as.character(distinctdforder$Category)
avgdf$birdtree<-gsub(" ","_",distinctdforder$Birdtree)
avgdf$BM_lit<-distinctdforder$BM_lit
avgdf$aud_spp<-distinctdforder$spp_audio
avgdf$aud_rel<-distinctdforder$audio_relation
#make comparative data frame object
birdCDO<-comparative.data(phy = birdtreels,data = avgdf,#[avgdf$Category!="Terrestrial",]
names.col = Binomial,
vcv = TRUE, na.omit = FALSE,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
#go to 'Audiograms linked to anatomy.R' file to audiogram analysis
#########scaling intraear##########
#set up intra-ear analyses
modellist_intra <- c(  "log(TM)~log(FP)",#impedance-related measures
"log(COffset)~log(TM)",
"log(UH)~log(TM)",
"log(TMA)~log(TM)",
"log(RW)~log(FP)",
"log(ES)~log(CL)",
"log(CL)~log(CV)",
"log(CL)~log(FP)",#
"log(FP)~log(CV)",#
"log(TM)~log(CV)")
geomcoefs_intra<-c(1,
0.5,
0.5,
0,
1,
1,
0.33,
0.5,
0.67,
0.67)
#list of functional categories for table
categorylist_intra<-c(rep("Impedance match",5),
"Stiffness",
rep("Columella morphology",4))
