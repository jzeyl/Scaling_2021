highlimit<-min(highflank$Hz)#High hz limit
}
return(list(lowlimit,highlimit,besthz,bestsensitivity))
}
#View(limits)
}
#set cutoff for the high and low Hz limits (dB)
cutoff<-35
#create new matrix to populate with data and convert to data audiogramram
for(i in seq_along(splt)){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(splt[[i]]$Hz,splt[[i]]$Threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
#df_audiogram$y is sound level (dB)
#df_audiogram$x is frequency (Hz)
besthz<-df_audiogram$x[df_audiogram$y==min(df_audiogram$y)]
bestsensitivity<-df_audiogram$y[df_audiogram$y==min(df_audiogram$y)]
#calcualte low Hz limit
if(nrow(df_audiogram[df_audiogram$y>cutoff & df_audiogram$x <besthz,])==0){#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$x)
}
else{
lowflank<-df_audiogram[df_audiogram$y>cutoff & df_audiogram$x <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$x)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$y>35 & df_audiogram$x >besthz,])==0){# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$x)
}
else{
highflank<-df_audiogram[df_audiogram$y>35 & df_audiogram$x >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$x)#High hz limit
}
limits[i,1]<-lowlimit
limits[i,2]<-highlimit
limits[i,3]<-splt[[i]]$Species[1]
limits[i,4]<-splt[[i]]$group[1]
limits[i,5]<-splt[[i]]$Hz[1]
limits[i,6]<-besthz
limits[i,7]<-bestsensitivity
}
#View(limits)
#convert to dataframe and give column names
limits<-as.data.frame(limits)
colnames(limits)<-c("LowHzlimit","HighHzlimit","Species","supraorder","Hz", "besthz","bestsensitivity")
limits[,1]<-as.numeric(as.character(limits$LowHzlimit))
limits[,2]<-as.numeric(as.character(limits$HighHzlimit))
limits$Hz<-as.numeric(as.character(limits$Hz))
limits$besthz<-as.numeric(as.character(limits$besthz))
limits$bestsensitivity<-as.numeric(as.character(limits$bestsensitivity))
as.data.frame(approx(Hz,threshold,n = 500))
audiogramslice<-function(cutoff = 35, Hz = Hz, threshold = threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
}
audiogramslice()
audiogramslice<-function(cutoff = 35, Hz = Hz, threshold = threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0){#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0){# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
return(list(lowlimit,highlimit,besthz,bestsensitivity))
}
#View(limits)
}
audiogramslice<-function(cutoff = 35, Hz = Hz, threshold = threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0){#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0){# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
return(list(lowlimit,highlimit,besthz,bestsensitivity))
}
audiogramslice()
audiogramslice(35, Hz, threshold = )
audiogramslice(35, Hz, threshold)
Hz_<-c(1,20,100,200, 500, 1000, 3000)
threshold_<-c(90,85,50,40,30,40,60)
audiogramslice(35, Hz_, threshold_)
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
View(df_audiogram)
df_audiogram$Hz<-df_audiogram$x
df_audiogram$threshold<-df_audiogram$y
View(df_audiogram)
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
plot(df_audiogram$x,df_audiogram$y)
lowlimit<-min(df_audiogram$Hz)
if(nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0){#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0){# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
#calcualte low Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0){#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0){# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
#calcualte low Hz limit
if
(nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
{#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0)
{# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
(nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]
audiogramslice<-function(cutoff = 35, Hz = Hz, threshold = threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
df_audiogram$Hz<-df_audiogram$x
df_audiogram$threshold<-df_audiogram$y
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if  (nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
{#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0)
{# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
return(list(lowlimit,highlimit,besthz,bestsensitivity))
}
audiogramslice()
audiogramslice()
Hz_<-c(1,20,100,200, 500, 1000, 3000)
threshold_<-c(90,85,50,40,30,40,60)
plot(df_audiogram$x,df_audiogram$y)
audiogramslice<-function(cutoff = 35, Hz = Hz, threshold = threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
df_audiogram$Hz<-df_audiogram$x
df_audiogram$threshold<-df_audiogram$y
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if  (nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
{#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0)
{# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
return(list(lowlimit,highlimit,besthz,bestsensitivity))
}
audiogramslice()
Hz_<-c(1,20,100,200, 500, 1000, 3000)
threshold_<-c(90,85,50,40,30,40,60)
plot(df_audiogram$x,df_audiogram$y)
audiogramslice<-function(cutoff = 35, Hz, threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
df_audiogram$Hz<-df_audiogram$x
df_audiogram$threshold<-df_audiogram$y
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if  (nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
{#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0)
{# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
return(list(lowlimit,highlimit,besthz,bestsensitivity))
}
audiogramslice()
audiogramslice(Hz = Hz_, threshold = threshold_)
audiogramslice(Hz = Hz_, threshold = threshold_)
Hz_<-c(1,20,100,200, 500, 1000, 3000)
threshold_<-c(90,85,50,40,30,40,60)
plot(df_audiogram$x,df_audiogram$y)
audiogramslice<-function(cutoff = 35, Hz, threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
df_audiogram$Hz<-df_audiogram$x
df_audiogram$threshold<-df_audiogram$y
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if  (nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
{#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0)
{# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
return(cbind(c(lowlimit,highlimit,besthz,bestsensitivity),c(lowlimit,highlimit,besthz,bestsensitivity))
}
audiogramslice()
Hz_<-c(1,20,100,200, 500, 1000, 3000)
threshold_<-c(90,85,50,40,30,40,60)
plot(df_audiogram$x,df_audiogram$y)
audiogramslice<-function(cutoff = 35, Hz, threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
df_audiogram$Hz<-df_audiogram$x
df_audiogram$threshold<-df_audiogram$y
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if  (nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
{#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0)
{# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
return(cbind(c(lowlimit,highlimit,besthz,bestsensitivity),c(lowlimit,highlimit,besthz,bestsensitivity))
}
audiogramslice(Hz = Hz_, threshold = threshold_)
limits<-as.data.frame(limits)
colnames(limits)<-c("LowHzlimit","HighHzlimit","besthz","bestsensitivity")
limits<-data.frame()
Hz_<-c(1,20,100,200, 500, 1000, 3000)
threshold_<-c(90,85,50,40,30,40,60)
plot(df_audiogram$x,df_audiogram$y)
audiogramslice<-function(cutoff = 35, Hz, threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
df_audiogram$Hz<-df_audiogram$x
df_audiogram$threshold<-df_audiogram$y
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if  (nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
{#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0)
{# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
#convert to dataframe and give column names
limits<-data.frame()
colnames(limits)<-c("LowHzlimit","HighHzlimit","besthz","bestsensitivity")
limits$LowHzlimit<-as.numeric(lowlimit)
limits$HighHzlimit<-as.numeric(highlimit)
limits$besthz<-as.numeric(besthz)
limits$bestsensitivity<-as.numeric(bestsensitivity)
return(limits)
}
audiogramslice(Hz = Hz_, threshold = threshold_)
Hz_<-c(1,20,100,200, 500, 1000, 3000)
threshold_<-c(90,85,50,40,30,40,60)
plot(df_audiogram$x,df_audiogram$y)
audiogramslice<-function(cutoff = 35, Hz, threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
df_audiogram$Hz<-df_audiogram$x
df_audiogram$threshold<-df_audiogram$y
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if  (nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
{#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0)
{# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
#convert to dataframe and give column names
limits<-data.frame()
#colnames(limits)<-c("LowHzlimit","HighHzlimit","besthz","bestsensitivity")
limits$LowHzlimit<-as.numeric(lowlimit)
limits$HighHzlimit<-as.numeric(highlimit)
limits$besthz<-as.numeric(besthz)
limits$bestsensitivity<-as.numeric(bestsensitivity)
return(limits)
}
audiogramslice(Hz = Hz_, threshold = threshold_)
limits$LowHzlimit<-as.numeric(lowlimit)
limits$LowHzlimit<-as.numeric()
limits$LowHzlimit<-as.numeric(1)
limits<-data.frame()
limits$measure<-c("lowlimit", "high", "best", "bestsens")
limits<-data.frame()
limits$measure<-as.character(c("lowlimit", "high", "best", "bestsens"))
data.frame()
?data.frame()
Hz_<-c(1,20,100,200, 500, 1000, 3000)
threshold_<-c(90,85,50,40,30,40,60)
plot(df_audiogram$x,df_audiogram$y)
audiogramslice<-function(cutoff = 35, Hz, threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
df_audiogram$Hz<-df_audiogram$x
df_audiogram$threshold<-df_audiogram$y
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if  (nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
{#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0)
{# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
#convert to dataframe and give column names
limits<-data.frame(lowlimit, highlimit)
#limits$measure<-as.character(c("lowlimit", "high", "best", "bestsens"))
#limits$HighHzlimit<-as.numeric(highlimit)
#limits$besthz<-as.numeric(besthz)
#limits$bestsensitivity<-as.numeric(bestsensitivity)
return(limits)
}
audiogramslice(Hz = Hz_, threshold = threshold_)
Hz_<-c(1,20,100,200, 500, 1000, 3000)
threshold_<-c(90,85,50,40,30,40,60)
plot(df_audiogram$x,df_audiogram$y)
audiogramslice<-function(cutoff = 35, Hz, threshold){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(Hz,threshold,n = 500))#approx function to interpolate audiogram
df_audiogram
df_audiogram$Hz<-df_audiogram$x
df_audiogram$threshold<-df_audiogram$y
besthz<-df_audiogram$Hz[df_audiogram$threshold==min(df_audiogram$threshold)]
bestsensitivity<-df_audiogram$threshold[df_audiogram$threshold==min(df_audiogram$threshold)]
#calcualte low Hz limit
if  (nrow(df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,])==0)
{#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$Hz)
}
else{
lowflank<-df_audiogram[df_audiogram$threshold>cutoff & df_audiogram$Hz <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$Hz)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,])==0)
{# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$Hz)
}
else{
highflank<-df_audiogram[df_audiogram$threshold>35 & df_audiogram$Hz >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$Hz)#High hz limit
}
#convert to dataframe and give column names
limits<-data.frame(lowlimit, highlimit, bestsensitivity,besthz)
#limits$measure<-as.character(c("lowlimit", "high", "best", "bestsens"))
#limits$HighHzlimit<-as.numeric(highlimit)
#limits$besthz<-as.numeric(besthz)
#limits$bestsensitivity<-as.numeric(bestsensitivity)
return(limits)
}
audiogramslice(Hz = Hz_, threshold = threshold_)
plot(Hz_,threshold_)
plot(Hz_,threshold_, log = "x")
plot(Hz_,threshold_, log = "x", type = "l")
?abline
plot(Hz_,threshold_, log = "x", type = "l")
abline(a = 35,0)
audiogramslice(Hz = Hz_, threshold = threshold_)
audiogramslice(cutoff = 60, Hz = Hz_, threshold = threshold_)
plot(Hz_,threshold_, log = "x", type = "l")
abline(a = 60,0)
