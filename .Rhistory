"log(besthz)~log(TM_FP)",
"log(besthz)~log(ECD)",
"log(besthz)~log(TM)",
"log(besthz)~log(FP)",
"log(besthz)~log(RW)",
"log(besthz)~log(HM)",
"log(besthz)~log(CL)",
"log(besthz)~log(CV)")
categorylist_lf<-c("Stiffness",
"Stiffness",
"Impedance match",
"Impedance match",
"Impedance match",
"Impedance match",
"Auditory endorgan length",
"Input/output areas",
"Input/output areas",
"Input/output areas",
"Head size",
"Columella size",
"Columella size")
categorylist_bs<-categorylist_lf
categorylist_bh<-categorylist_lf
categorylist_hf<-categorylist_lf
##################PGLS MODELS besthz###############
modellist_bh
residuals(pgls_models_list[[1]])
str(residuals(pgls_models_list[[1]]))
dimnames(residuals(pgls_models_list[[1]]))
dimnames(residuals(pgls_models_list[[1]]))[[1]]
residuals(pgls_models_list[[1]]
)
str(residuals(pgls_models_list)[[1]])
str(residuals(pgls_models_list[[1]]))
unname(residuals(pgls_models_list[[1]]))
str(unname(residuals(pgls_models_list[[1]])))
unname(residuals(pgls_models_list[[1]]))[1]
as.data.frame(unname(residuals(pgls_models_list[[1]]))) %>% View()
residtest<-as.data.frame(residuals(pgls_models_list[[1]]))
residtest$residname<-row.names(residtest)
View(residtest)
pgls_todo_hm[1]
rename(residtest, paste0("resid_",pgls_todo_hm[1])) = V1)
rename(residtest, paste0("resid_",pgls_todo_hm[1]) = V1)
paste0("resid_",pgls_todo_hm[1])
residtest<-as.data.frame(residuals(pgls_models_list[[1]]))
residtest$residname<-row.names(residtest)
resid_measure<-paste0("resid_",pgls_todo_hm[1])
rename(residtest, resid_measure = V1)
View(residtest)
rename(residtest, resid_measure = V1)
new<- rename(residtest, resid_measure = V1)
View(new)
resid_measure
resid_measure<-paste0("resid_",pgls_todo_hm[1])
new<- rename(residtest, resid_measure = V1)
View(new)
paste0("resid_",pgls_todo_hm[1])
new<- rename_with(residtest, resid_measure = V1)
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[1])
}
?rename_with
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[1])
}
new<- rename_with(residtest, resid_measure, V1)
resid_measure()
rename_with(residtest, resid_measure, V1)
new<- rename_with(residtest, resid_measure()= V1)
new<- rename_with(residtest, as.character(resid_measure()) = V1)
residtest<-as.data.frame(residuals(pgls_models_list[[1]]))
residtest$resid_bname<-row.names(residtest)
?assign
as.character(resid_measure)
?setNames
setNames(residtest)
setNames(residtest, c(paste0("resid_",pgls_todo_hm[1]),"residbname")
)
setNames(residtest, c(paste0("resid_",pgls_todo_hm[1]),"residbname")) %>% View()
residtest<-as.data.frame(residuals(pgls_models_list[[1]]))
residtest$resid_bname<-row.names(residtest)
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[1])
}
residtest<-setNames(residtest,c(paste0(resid_measure(),"resid_bname"))
)
residtest<-as.data.frame(residuals(pgls_models_list[[1]]))
residtest$resid_bname<-row.names(residtest)
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[1])
}
residtest<-setNames(residtest,c(paste0(resid_measure(),"resid_bname")))
residtest<-as.data.frame(residuals(pgls_models_list[[1]]))
residtest$resid_bname<-row.names(residtest)
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[1])
}
residtest<-setNames(residtest,c(resid_measure(),"resid_bname")))
residtest<-as.data.frame(residuals(pgls_models_list[[1]]))
residtest$resid_bname<-row.names(residtest)
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[1])
}
residtest<-setNames(residtest,c(resid_measure(),"resid_bname"))
#join audiogram data to residuals
joined<-left_join(residtest,limits,by = c("resid_bname" = "spp_aud"))
joined<-joined[which(!is.na(joined$aud_rel)),] #only keep audiogram species
View(joined)
getresids_as_df<-function(i){
residtest<-as.data.frame(residuals(pgls_models_list[[i]]))
residtest$resid_bname<-row.names(residtest)
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[i])
residtest<-setNames(residtest,c(resid_measure(),"resid_bname"))
}
}
getresids_as_df(1)
getresids_as_df(2)
residtest %>% View()
getresids_as_df<-function(i){
residtest<-as.data.frame(residuals(pgls_models_list[[i]]))
residtest$resid_bname<-row.names(residtest)
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[i])
}
residtest<-setNames(residtest,c(resid_measure(),"resid_bname"))
}
getresids_as_df(2)
assign(toadd,getresids_as_df(2))
?assign
assign("toadd",getresids_as_df(2))
View(toadd)
assign("toadd",getresids_as_df(3))
joined<-full_join(limits,residtest,by = c("spp_aud" = "resid_bname"))
View(joined)
getresids_as_df<-function(i){
residtest<-as.data.frame(residuals(pgls_models_list[[i]]))
residtest$resid_bname<-row.names(residtest)
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[i])
}
residtest<-setNames(residtest,c(resid_measure(),"resid_bname"))
assign("toadd",getresids_as_df(i))
}
getresids_as_df<-function(i){
residtest<-as.data.frame(residuals(pgls_models_list[[i]]))
residtest$resid_bname<-row.names(residtest)
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[i])
}
residtest<-setNames(residtest,c(resid_measure(),"resid_bname"))
}
seq_along(ptls_todo_hm)
seq_along(pgls_todo_hm)
resids_df_list<-list()
for(i in seq_along(pgls_todo_hm)){
resids_df_list[[i]]<-assign("toadd",getresids_as_df(i))
}
resids_df_list[[1]] %<% View()
resids_df_list[[1]] %>% View()
resids_df_list[[6]] %>% View()
resids_df_list[[7]] %>% View()
full_join(limits,resids_df_list[[1]],by = c("spp_aud" = "resid_bname"))
limits %>% full_join(.,resids_df_list[[1]],by = c("spp_aud" = "resid_bname"))
limits %>% full_join(.,resids_df_list[[1]],by = c("spp_aud" = "resid_bname"))
%>% full_join(.,resids_df_list[[2]],by = c("spp_aud" = "resid_bname"))%>% View()
limits %>% full_join(.,resids_df_list[[1]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[2]],by = c("spp_aud" = "resid_bname"))%>%
View()
joined<-limits %>% full_join(.,resids_df_list[[1]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[2]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[3]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[4]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[5]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[6]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[7]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[8]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[9]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[10]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[11]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[12]],by = c("spp_aud" = "resid_bname"))
View(joined)
joined<-joined[which(!is.na(joined$aud_rel)),]
nrow(joined)
names(joined)
names(joined)[-12]
names(joined)[length(names(joined)-12:length(names(joined)]
(length(names(joined)-12):length(names(joined))
)
(length(names(joined))-12)
names(joined)[(length(names(joined))-12):length(names(joined))]
names(joined)[24:35]
birdCDO<-comparative.data(phy = birdtreels,data = joined,#[avgdf$Category!="Terrestrial",]
names.col =residname,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
names(birdCDO$data)[24:35]
names(birdCDO$data)
birdCDO<-comparative.data(phy = birdtreels,data = joined,#[avgdf$Category!="Terrestrial",]
names.col =residname,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
names(birdCDO$data)[24:35]
names(birdCDO$data)
birdCDO<-comparative.data(phy = birdtreels,data = joined,#[avgdf$Category!="Terrestrial",]
names.col =binomial,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
names(birdCDO$data)[24:35]
birdCDO$data
names(birdCDO$data)[24:35]
paste0("bestsensitivity~",names(birdCDO$data)[24:35])
modellist_bs<-paste0("bestsensitivity~",names(birdCDO$data)[24:35])
categorylist_bs<-categorylist_lf
birdtreels$tip.label[14]
source("pgls_audiogram_bs.R")
modellist_bs
pgls_models_list
pgls_models_list
pgls_models
pgls_models(modellist_bs[[1]])
modellist_bs
View(birdCDO$data)
names(birdCDO)
names(birdCDO$data)
names(birdCDO$data)[24:35]
?gsub
gsub("~","vs",names(birdCDO$data)[24:35])
residlist<-gsub("~","vs",names(birdCDO$data)[24:35])
residlist
modellist_bs<-paste0("bestsensitivity~",residlist)
pgls_models(modellist_bs[[1]])
birdCDO$data %>% rename_with(~ gsub("~", "vs", .x, fixed = TRUE))
birdCDO$data<-birdCDO$data %>% rename_with(~ gsub("~", "vs", .x, fixed = TRUE))
names(birdCDO$data)[24:35]
residlist
modellist_bs<-paste0("bestsensitivity~",residlist)
pgls_models(modellist_bs[[1]])
residlist
gsub("(","_",names(birdCDO$data)[24:35])
names(birdCDO$data)[24:35]
gsub("[()]","_",names(birdCDO$data)[24:35])
residlist<-gsub("[()]","_",names(birdCDO$data)[24:35])
paste0("bestsensitivity~",residlist)
modellist_bs<-paste0("bestsensitivity~",residlist)
modellist[[1]]
modellist_bs[[1]]
pgls_models(modellist_bs[[1]])
birdCDO$data<-birdCDO$data %>% rename_with(~ gsub("~", "vs", .x, fixed = TRUE)) %>%
rename_with(~ gsub("[()]", "", .x, fixed = TRUE))
birdCDO$data
names(birdCDO$data)
birdCDO$data<-birdCDO$data %>% rename_with(~ gsub("~", "vs", .x, fixed = TRUE)) %>%
rename_with(~ gsub("[()]", "", .x, fixed = TRUE))
names(birdCDO$data)
birdCDO$data<-birdCDO$data %>%  rename_with(~ gsub("[()]", "", .x, fixed = TRUE))
names(birdCDO)
names(birdCDO$
data())
names(birdCDO$data)
birdCDO$data[24:35]
birdCDO$data[24:35]<-birdCDO$data[24:35] %>%  rename_with(~ gsub("[()]", "", .x, fixed = TRUE))
names(birdCDO$data)
residlist
setNames(birdCDO$data[24:35],residlist)
birdCDO$data[24:35]<-setNames(birdCDO$data[24:35],residlist)
names(birdCDO$data)
birdCDO$data[24:35]
setNames(birdCDO$data[24:35],residlist)
residlist
24:35
length(24:35)
birdCDO$data[24:35]<-setNames(birdCDO$data[24:35],residlist)
names(birdCDO$data)
setNames(birdCDO$data[24:35],residlist)
names(birdCDO$data)[1:23]
residlist
birdCDO$data<-setNames(birdCDO$data,c(names(birdCDO$data)[1:23],residlist))
gsub("[()]","_",names(birdCDO$data)[24:35])
setNames(birdCDO$data,c(names(birdCDO$data)[1:23],residlist))
goodname<-setNames(birdCDO$data,c(names(birdCDO$data)[1:23],residlist))
View(goodname)
joined %>% rename_with(~ gsub("~", "vs", .x, fixed = TRUE))
residlist<-gsub("[()]","_",names(joined)[24:35])
names(joined)
residlist
goodname<-setNames(joined,c(names(joined)[1:23],residlist))
#remove tilda from names to not mess up pgls formulas based on names
joined<-joined %>% rename_with(~ gsub("~", "vs", .x, fixed = TRUE))
residlist<-gsub("[()]","_",names(joined)[24:35])
joined<-setNames(joined,c(names(joined)[1:23],residlist))
names(joined)
residlist
names(joined)
joined<-limits %>% full_join(.,resids_df_list[[1]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[2]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[3]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[4]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[5]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[6]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[7]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[8]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[9]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[10]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[11]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[12]],by = c("spp_aud" = "resid_bname"))
#only keep audiogram species
joined<-joined[which(!is.na(joined$aud_rel)),]
names(joined)
names(joined)
#remove tilda from names to not mess up pgls formulas based on names
joined<-joined %>% rename_with(~ gsub("~", "vs", .x, fixed = TRUE))
residlist<-gsub("[()]","_",names(joined)[25:36])
joined<-setNames(joined,c(names(joined)[1:24],residlist))
names(joined)
birdCDO<-comparative.data(phy = birdtreels,data = joined,#[avgdf$Category!="Terrestrial",]
names.col =binomial,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
modellist_bs<-paste0("bestsensitivity~",residlist)
pgls_models(modellist_bs[[1]])
source("pgls_audiogram_bs.R")
pgls_models(modellist_bs[[1]])
summary(pgls_models(modellist_bs[[1]]))
names(joined)
residlist
modellist_bs<-paste0("bestsensitivity~",residlist)
modellist_lf<-paste0("log(LowHzlimit)~",residlist)
modellist_hf<-paste0("log(HighHzlimit)~",residlist)
modellist_bh<-paste0("log(besthz)~",residlist)
source("pgls_audiogram_lf.R")
source("pgls_audiogram_hf.R")
pgls_models_list_bs<-lapply(modellist_bs,pgls_models)#run pgls
#make list of dataframes with the PGLS outputs.
tbllist_audiogram<-list()
for (i in seq_along(pgls_models_list_bs)){#change th 'Model' colume in this as appropriate
tbllist_audiogram[[i]]<-as.data.frame(summary(pgls_models_list_bs[[i]])$'coefficients')
tbllist_audiogram[[i]]$Adj_Rsquared<-summary(pgls_models_list_bs[[i]])$'adj.r.squared'[1]#rsquared
tbllist_audiogram[[i]]$Model<-rep(modellist_bs[i],2)#formula<_____________________CHECK FORMULA LIST HERE is correct
tbllist_audiogram[[i]]$Lambda<-summary(pgls_models_list_bs[[i]])$'param'[[2]]#lambda
tbllist_audiogram[[i]]$Fstat<-summary(pgls_models_list_bs[[i]])$fstatistic[1]
tbllist_audiogram[[i]]$Fstat_numdf<-summary(pgls_models_list_bs[[i]])$fstatistic[2]
tbllist_audiogram[[i]]$Fstat_dendf<-summary(pgls_models_list_bs[[i]])$fstatistic[3]
}
#organize the dataframe table (significant digist, remove redundant F stat & R squared)
for(i in seq_along(tbllist_audiogram)){
tbllist_audiogram[[i]]$Coefficients<-row.names(tbllist_audiogram[[i]])
tbllist_audiogram[[i]]$Coefficients<-gsub('[[:digit:]]+', '', tbllist_audiogram[[i]]$Coefficients)#regex to remove number automatically added during the loop
#identify numeric cols and character cols to apply the significant digits function
character_cols<-unlist(lapply(tbllist_audiogram[[i]], is.character))
numeric_cols <- unlist(lapply(tbllist_audiogram[[i]], is.numeric))# Identify numeric columns
tbllist_audiogram[[i]]<-cbind(tbllist_audiogram[[i]][,which(character_cols)],signif(tbllist_audiogram[[i]][,which(numeric_cols)], digits = 2))
colnames(tbllist_audiogram[[i]])[6]<-"P.val"#rename b/c flextable doesn't work will with the '>' sign
row.names(tbllist_audiogram[[i]])<-c()#remove row names
print(tbllist_audiogram[[i]])
}
audiogrampgls_bs<-do.call(rbind.data.frame,tbllist_audiogram)
audiogrampgls_bs$category<-rep(categorylist_bs,each = 2)
audiogrampgls_bs <- subset(audiogrampgls_bs, select = c(category,Model,Coefficients,Estimate, `Std. Error`,P.val,Adj_Rsquared,Lambda))
flexall<-flextable(audiogrampgls_bs) %>% add_header_lines(
values = "Table X. Models for selection") %>%
bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
source("pgls_audiogram_bs.R")
categorylist_lf<-c("Stiffness",
"Stiffness",
"Impedance match",
"Impedance match",
"Impedance match",
"Impedance match",
"Auditory endorgan length",
"Input/output areas",
"Input/output areas",
"Input/output areas",
"Head size",
"Columella size",
"Columella size")
categorylist_bs<-categorylist_lf
categorylist_bh<-categorylist_lf
categorylist_hf<-categorylist_lf
source("pgls_audiogram_bs.R")
categorylist_bh
pgls_models<-function(i){
pglsfit<-pgls(as.formula(i), data = birdCDO, #check comparative data object here<---
lambda = 'ML', #find lambda using maximum likelihood
bounds = list(lambda=c(0.01,1)))#####
}
#Head mass only
#modellist<-pgls_todo_hm
pgls_models_list_hf<-lapply(modellist_hf,pgls_models)#run pgls
#make list of dataframes with the PGLS outputs.
tbllist_audiogram<-list()
for (i in seq_along(pgls_models_list_hf)){#change th 'Model' colume in this as appropriate
tbllist_audiogram[[i]]<-as.data.frame(summary(pgls_models_list_hf[[i]])$'coefficients')
tbllist_audiogram[[i]]$Adj_Rsquared<-summary(pgls_models_list_hf[[i]])$'adj.r.squared'[1]#rsquared
tbllist_audiogram[[i]]$Model<-modellist_hf[i]#formula<_____________________CHECK FORMULA LIST HERE is correct
tbllist_audiogram[[i]]$Lambda<-summary(pgls_models_list_hf[[i]])$'param'[[2]]#lambda
tbllist_audiogram[[i]]$Fstat<-summary(pgls_models_list_hf[[i]])$fstatistic[1]
tbllist_audiogram[[i]]$Fstat_numdf<-summary(pgls_models_list_hf[[i]])$fstatistic[2]
tbllist_audiogram[[i]]$Fstat_dendf<-summary(pgls_models_list_hf[[i]])$fstatistic[3]
}
#organize the dataframe table (significant digist, remove redundant F stat & R squared)
for(i in seq_along(tbllist_audiogram)){
tbllist_audiogram[[i]]$Coefficients<-row.names(tbllist_audiogram[[i]])
tbllist_audiogram[[i]]$Coefficients<-gsub('[[:digit:]]+', '', tbllist_audiogram[[i]]$Coefficients)#regex to remove number automatically added during the loop
#identify numeric cols and character cols to apply the significant digits function
character_cols<-unlist(lapply(tbllist_audiogram[[i]], is.character))
numeric_cols <- unlist(lapply(tbllist_audiogram[[i]], is.numeric))# Identify numeric columns
tbllist_audiogram[[i]]<-cbind(tbllist_audiogram[[i]][,which(character_cols)],signif(tbllist_audiogram[[i]][,which(numeric_cols)], digits = 2))
#tbllist_audiogram[[i]] <- tbllist_audiogram[[i]][, c(6,11,8:10,7,5,1:4)]#change order of columns
#dplyr::select_if(tbllist_audiogram[[i]], is.numeric)#select only numeric data
colnames(tbllist_audiogram[[i]])[6]<-"P.val"#rename b/c flextable doesn't work will with the '>' sign
row.names(tbllist_audiogram[[i]])<-c()#remove row names
print(tbllist_audiogram[[i]])
}
audiogrampgls_hf<-do.call(rbind.data.frame,tbllist_audiogram)
audiogrampgls_hf$category<-rep(categorylist_hf,each = 2)
audiogrampgls_hf <- subset(audiogrampgls_hf, select = c(category,Model,Coefficients,Estimate, `Std. Error`,P.val,Adj_Rsquared,Lambda))
#visualize the table better using the flextable package
flexall<-flextable(audiogrampgls_hf) %>% add_header_lines(
values = "Table X. Models for selection") %>%
bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
rep(categorylist_hf,each = 2)
audiogrampgls_hf
audiogrampgls_bh
audiogrampgls_bs
residlist
residlist
categorylist_lf<-c("Impedance match",
"Impedance match",
"Impedance match",
"Impedance match",
"Auditory endorgan length",
"Input/output areas",
"Input/output areas",
"Input/output areas",
"Stiffness",
"Stiffness",
"Columella size",
"Columella size")
categorylist_bs<-categorylist_lf
categorylist_bh<-categorylist_lf
categorylist_hf<-categorylist_lf
source("pgls_audiogram_bs.R")
source("pgls_audiogram_lf.R")
source("pgls_audiogram_hf.R")
source("pgls_audiogram_bh.R")
### combine results from regressions for each measure into a single datagrame
audio_pgls_results<-bind_rows(audiogrampgls_bh,
audiogrampgls_bs,
audiogrampgls_lf,
audiogrampgls_hf)
audio_pgls_results$CI95_low<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate+audio_pgls_results$`Std. Error`*1.96
#combine estimate +/- 95 CI into one cell
audio_pgls_results$pglsslope<-paste0(audio_pgls_results$Estimate," (",
format(round(audio_pgls_results$CI95_low, 3), nsmall = 3),
",",
format(round(audio_pgls_results$CI95_high, 3), nsmall = 3),
")")
#split up model column
spltmodel<-strsplit(audio_pgls_results$Model,"~")
audio_pgls_results$`Audiogram metric`<-unlist(lapply(spltmodel, `[[`, 1))
audio_pgls_results$anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
#only keep significant relationships
audio_pgls_results<-audio_pgls_results %>%
select(`Audiogram metric`,
category,
Coefficients,
pglsslope,
Adj_Rsquared,
P.val,
Lambda)%>%
filter(Coefficients!="(Intercept)" &
P.val <0.05)
#arrange by audiogram metric, category, and R2
audio_pgls_results <-audio_pgls_results %>%
arrange(factor(audio_pgls_results$`Audiogram metric`),
factor(category,levels = c("Impedance match",
"Stiffness",
"Input/output areas",
"Auditory endorgan length",
"Columella size")),
desc(Adj_Rsquared))
# remove the "log" from 'Coefficients'
#audio_pgls_results$xmodel_nolog<-numeric()
for(i in seq_along(audio_pgls_results$Coefficients)){
audio_pgls_results$Coefficients[i]<-gsub("[\\(\\)]", "", regmatches(audio_pgls_results$Coefficients, gregexpr("\\(.*?\\)", audio_pgls_results$Coefficients))[[i]])
}
#visualize the table better using the flextable package
flexall<-flextable(audio_pgls_results) %>% add_header_lines(
values = "Table X. ") %>%
#bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
toprint<-read_docx() #create word doc object
body_add_flextable(toprint,flexall)#add pgls output table
body_end_section_landscape(toprint)
#write.csv(intra,"E:/Analysis_plots/scalingintra feb 17.csv")
print(toprint,target = paste0(choose.dir(),"/pgls_audio all_May 21 2022.docx"))
