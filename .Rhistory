"log(LowHzlimit)~log(COffset)",
"log(LowHzlimit)~log(TM_FP)",
"log(LowHzlimit)~log(ECD)",
"log(LowHzlimit)~log(TM)",
"log(LowHzlimit)~log(FP)",
"log(LowHzlimit)~log(RW)",
"log(LowHzlimit)~log(HM)",
"log(LowHzlimit)~log(CL)",
"log(LowHzlimit)~log(CV)")
###################PGLS MODELS HIGH LIMIT##############
modellist_hf<-c(
"log(HighHzlimit)~log(Air)",
"log(HighHzlimit)~log(ES)",
"log(HighHzlimit)~log(TMA)",
"log(HighHzlimit)~log(UH)",
"log(HighHzlimit)~log(COffset)",
"log(HighHzlimit)~log(TM_FP)",
"log(HighHzlimit)~log(ECD)",
"log(HighHzlimit)~log(TM)",
"log(HighHzlimit)~log(FP)",
"log(HighHzlimit)~log(RW)",
"log(HighHzlimit)~log(HM)",
"log(HighHzlimit)~log(CL)",
"log(HighHzlimit)~log(CV)")
##################PGLS MODELS besthz###############
modellist_bh<-c(
"log(besthz)~log(Air)",
"log(besthz)~log(ES)",
"log(besthz)~log(TMA)",
"log(besthz)~log(UH)",
"log(besthz)~log(COffset)",
"log(besthz)~log(TM_FP)",
"log(besthz)~log(ECD)",
"log(besthz)~log(TM)",
"log(besthz)~log(FP)",
"log(besthz)~log(RW)",
"log(besthz)~log(HM)",
"log(besthz)~log(CL)",
"log(besthz)~log(CV)")
categorylist_lf<-c("Stiffness",
"Stiffness",
"Impedance match",
"Impedance match",
"Impedance match",
"Impedance match",
"Auditory endorgan length",
"Input/output areas",
"Input/output areas",
"Input/output areas",
"Head size",
"Columella size",
"Columella size")
#only select the rows for which anatomical data is available for the corresponding audiograms
limitsanat<-limits[which(!is.na(limits$binomial)),]
#rename phylogeny tips to matching with the species for which audiogram is available
birdtreels$tip.label[14]<-"Corvus_cornix" #renamed from Corvus_albus
birdtreels$tip.label[51]<-"Phalacrocorax_carbo" #rename "phalacrocorax_lucidus"
#made data frame object
birdCDO<-comparative.data(phy = birdtreels,data = limitsanat,#[avgdf$Category!="Terrestrial",]
names.col =binomial,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
modellist_bs
modellist_lf
modellist_bh
modellist_hf
modellist_sig
audio_pgls_results$`Audiogram metric`
source("pgls_audiogram_bs.R")
#results table is saved as 'audiogrampgls-bs'
#visualize the table better using the flextable package
#flexall<-flextable(audiogrampgls_bs) %>% add_header_lines(
#  values = "Table X. Models for selection") %>%
#  bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
#  autofit()
#flexall
#define pgls model diagnostics function
#pgls model diagnostics
par(mfrow=c(2,2))
par(mar=c(1,1,1,1))
plots_audio<-lapply(pgls_models_list_bs, plot)
plots_audio
###print results
#write.csv(audiogrampgls_bs,"audiogrampgls_bs.csv")
#print(toprint,target = "audiogrampgls_bs.docx")
# low frequency limit (Hz) ------------------------------------------------
source("pgls_audiogram_lf.R")
#results table is saved as 'audiogrampgls-lf'
#pgls model diagnostics
par(mfrow=c(2,2))
par(mar=c(1,1,1,1))
plots_audio<-lapply(pgls_models_list_lf, plot)
plots_audio
#visualize the table better using the flextable package
#flexall<-flextable(audiogrampgls_lf) %>% add_header_lines(
# values = "Table X. Models for selection") %>%
#  bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
#  autofit()
#flexall
#print to file
#write.csv(audiogrampgls_lf,"audiogrampgls_lf.csv")
#print(toprint,target = "audiogrampgls_lf.docx")
# high frequency limit ----------------------------------------------------
source("pgls_audiogram_hf.R")
#results table is saved as 'audiogrampgls-hf'
#visualize the table better using the flextable package
#flexall<-flextable(audiogrampgls_hf) %>% add_header_lines(
#  values = "Table X. Models for selection") %>%
#  bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
#  autofit()
#flexall
#diagnostics
#pgls model diagnostics
par(mfrow=c(2,2))
par(mar=c(1,1,1,1))
plots_audio<-lapply(pgls_models_list_hf, plot)
plots_audio
#print to file
#write.csv(audiogrampgls_hf,"audiogrampgls_hf.csv")
#print(toprint,target = "audiogrampgls_hf.docx")
## best frequency ----------------------------------------------------------
source("pgls_audiogram_bh.R")
#results table is saved as 'audiogrampgls-bh'
#pgls model diagnostics
par(mfrow=c(2,2))
par(mar=c(1,1,1,1))
plots_audio<-lapply(pgls_models_list_bs, plot)
plots_audio
### combine results from regressions for each measure into a single datagrame
audio_pgls_results<-bind_rows(audiogrampgls_bh,
audiogrampgls_bs,
audiogrampgls_lf,
audiogrampgls_hf)
audio_pgls_results$CI95_low<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate+audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$pglsslope<-paste0(audio_pgls_results$Estimate," (",
format(round(audio_pgls_results$CI95_low, 3), nsmall = 3),
",",
format(round(audio_pgls_results$CI95_high, 3), nsmall = 3),
")")
View(audio_pgls_results)
categorylist_bs<-categorylist_lf
categorylist_bh<-categorylist_lf
categorylist_hf<-categorylist_lf
limitsanat<-limits[which(!is.na(limits$binomial)),]
#rename phylogeny tips to matching with the species for which audiogram is available
birdtreels$tip.label[14]<-"Corvus_cornix" #renamed from Corvus_albus
birdtreels$tip.label[51]<-"Phalacrocorax_carbo" #rename "phalacrocorax_lucidus"
#made data frame object
birdCDO<-comparative.data(phy = birdtreels,data = limitsanat,#[avgdf$Category!="Terrestrial",]
names.col =binomial,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
###########best sensitivity#################
source("pgls_audiogram_bs.R")
#results table is saved as 'audiogrampgls-bs'
#visualize the table better using the flextable package
#flexall<-flextable(audiogrampgls_bs) %>% add_header_lines(
#  values = "Table X. Models for selection") %>%
#  bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
#  autofit()
#flexall
#define pgls model diagnostics function
#pgls model diagnostics
par(mfrow=c(2,2))
par(mar=c(1,1,1,1))
plots_audio<-lapply(pgls_models_list_bs, plot)
plots_audio
###print results
#write.csv(audiogrampgls_bs,"audiogrampgls_bs.csv")
#print(toprint,target = "audiogrampgls_bs.docx")
# low frequency limit (Hz) ------------------------------------------------
source("pgls_audiogram_lf.R")
#results table is saved as 'audiogrampgls-lf'
#pgls model diagnostics
par(mfrow=c(2,2))
par(mar=c(1,1,1,1))
plots_audio<-lapply(pgls_models_list_lf, plot)
plots_audio
#visualize the table better using the flextable package
#flexall<-flextable(audiogrampgls_lf) %>% add_header_lines(
# values = "Table X. Models for selection") %>%
#  bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
#  autofit()
#flexall
#print to file
#write.csv(audiogrampgls_lf,"audiogrampgls_lf.csv")
#print(toprint,target = "audiogrampgls_lf.docx")
# high frequency limit ----------------------------------------------------
source("pgls_audiogram_hf.R")
#results table is saved as 'audiogrampgls-hf'
#visualize the table better using the flextable package
#flexall<-flextable(audiogrampgls_hf) %>% add_header_lines(
#  values = "Table X. Models for selection") %>%
#  bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
#  autofit()
#flexall
#diagnostics
#pgls model diagnostics
par(mfrow=c(2,2))
par(mar=c(1,1,1,1))
plots_audio<-lapply(pgls_models_list_hf, plot)
plots_audio
#print to file
#write.csv(audiogrampgls_hf,"audiogrampgls_hf.csv")
#print(toprint,target = "audiogrampgls_hf.docx")
## best frequency ----------------------------------------------------------
source("pgls_audiogram_bh.R")
#results table is saved as 'audiogrampgls-bh'
#pgls model diagnostics
par(mfrow=c(2,2))
par(mar=c(1,1,1,1))
plots_audio<-lapply(pgls_models_list_bs, plot)
plots_audio
### combine results from regressions for each measure into a single datagrame
audio_pgls_results<-bind_rows(audiogrampgls_bh,
audiogrampgls_bs,
audiogrampgls_lf,
audiogrampgls_hf)
audio_pgls_results$CI95_low<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate+audio_pgls_results$`Std. Error`*1.96
#combine estimate +/- 95 CI into one cell
audio_pgls_results$pglsslope<-paste0(audio_pgls_results$Estimate," (",
format(round(audio_pgls_results$CI95_low, 3), nsmall = 3),
",",
format(round(audio_pgls_results$CI95_high, 3), nsmall = 3),
")")
#split up model column
spltmodel<-strsplit(audio_pgls_results$Model,"~")
audio_pgls_results$`Audiogram metric`<-unlist(lapply(spltmodel, `[[`, 1))
audio_pgls_results$anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
#only keep significant relationships
audio_pgls_results<-audio_pgls_results %>% select(`Audiogram metric`,
category,
Coefficients,
pglsslope,
Adj_Rsquared,
P.val,
Lambda)%>%
filter(Coefficients!="(Intercept)" &
P.val <0.05)
#arrange by audiogram metric, category, and R2
audio_pgls_results <-audio_pgls_results %>%
arrange(factor(audio_pgls_results$`Audiogram metric`),
factor(category,levels = c("Impedance match",
"Stiffness",
"Input/output areas",
"Auditory endorgan length",
"Columella size")),
desc(Adj_Rsquared))
# remove the "log" from 'Coefficients'
#audio_pgls_results$xmodel_nolog<-numeric()
for(i in seq_along(audio_pgls_results$Coefficients)){
audio_pgls_results$Coefficients[i]<-gsub("[\\(\\)]", "", regmatches(audio_pgls_results$Coefficients, gregexpr("\\(.*?\\)", audio_pgls_results$Coefficients))[[i]])
}
#visualize the table better using the flextable package
flexall<-flextable(audio_pgls_results) %>% add_header_lines(
values = "Table X. ") %>%
#bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
### combine results from regressions for each measure into a single datagrame
audio_pgls_results<-bind_rows(audiogrampgls_bh,
audiogrampgls_bs,
audiogrampgls_lf,
audiogrampgls_hf)
audio_pgls_results$CI95_low<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate+audio_pgls_results$`Std. Error`*1.96
### combine results from regressions for each measure into a single datagrame
audio_pgls_results<-bind_rows(audiogrampgls_bh,
audiogrampgls_bs,
audiogrampgls_lf,
audiogrampgls_hf)
audio_pgls_results$CI95_low<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate+audio_pgls_results$`Std. Error`*1.96
#combine estimate +/- 95 CI into one cell
audio_pgls_results$pglsslope<-paste0(audio_pgls_results$Estimate," (",
format(round(audio_pgls_results$CI95_low, 3), nsmall = 3),
",",
format(round(audio_pgls_results$CI95_high, 3), nsmall = 3),
")")
#split up model column
spltmodel<-strsplit(audio_pgls_results$Model,"~")
audio_pgls_results$`Audiogram metric`<-unlist(lapply(spltmodel, `[[`, 1))
audio_pgls_results$anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
#only keep significant relationships
audio_pgls_results<-audio_pgls_results %>% select(`Audiogram metric`,
category,
Coefficients,
pglsslope,
Adj_Rsquared,
P.val,
Lambda)%>%
filter(Coefficients!="(Intercept)" &
P.val <0.05)
### combine results from regressions for each measure into a single datagrame
audio_pgls_results<-bind_rows(audiogrampgls_bh,
audiogrampgls_bs,
audiogrampgls_lf,
audiogrampgls_hf)
audio_pgls_results$CI95_low<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate+audio_pgls_results$`Std. Error`*1.96
#combine estimate +/- 95 CI into one cell
audio_pgls_results$pglsslope<-paste0(audio_pgls_results$Estimate," (",
format(round(audio_pgls_results$CI95_low, 3), nsmall = 3),
",",
format(round(audio_pgls_results$CI95_high, 3), nsmall = 3),
")")
#split up model column
spltmodel<-strsplit(audio_pgls_results$Model,"~")
audio_pgls_results$`Audiogram metric`<-unlist(lapply(spltmodel, `[[`, 1))
audio_pgls_results$anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
#only keep significant relationships
audio_pgls_results<-audio_pgls_results %>%
filter(Coefficients!="(Intercept)" &
P.val <0.05)
### combine results from regressions for each measure into a single datagrame
audio_pgls_results<-bind_rows(audiogrampgls_bh,
audiogrampgls_bs,
audiogrampgls_lf,
audiogrampgls_hf)
audio_pgls_results$CI95_low<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate+audio_pgls_results$`Std. Error`*1.96
### combine results from regressions for each measure into a single datagrame
audio_pgls_results<-bind_rows(audiogrampgls_bh,
audiogrampgls_bs,
audiogrampgls_lf,
audiogrampgls_hf)
audio_pgls_results$CI95_low<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate+audio_pgls_results$`Std. Error`*1.96
#combine estimate +/- 95 CI into one cell
audio_pgls_results$pglsslope<-paste0(audio_pgls_results$Estimate," (",
format(round(audio_pgls_results$CI95_low, 3), nsmall = 3),
",",
format(round(audio_pgls_results$CI95_high, 3), nsmall = 3),
")")
#split up model column
spltmodel<-strsplit(audio_pgls_results$Model,"~")
audio_pgls_results$`Audiogram metric`<-unlist(lapply(spltmodel, `[[`, 1))
audio_pgls_results$anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
#only keep significant relationships
audio_pgls_results<-audio_pgls_results %>%
filter(Coefficients!="(Intercept)" &
P.val <0.05)
#get model list from the results table (only significant results)
modellist_sig<-paste0(audio_pgls_results$`Audiogram metric`,"~log(",
audio_pgls_results$Coefficients,")")
modellist_sig
audio_pgls_results$Coefficients
modellist_sig<-paste0(audio_pgls_results$`Audiogram metric`,
audio_pgls_results$Coefficients)
modellist_sig
modellist_sig<-paste0(audio_pgls_results$`Audiogram metric`,"~",
audio_pgls_results$Coefficients)
modellist_sig
pgls_models_sig<-lapply(modellist_sig,pgls_models)#run pgls
summary(pgls_models_list[[1]])
for(i in seq_along(anattrait_simple)){
assign(paste0("slpline","_",as.character(i)),
pgls_models_sig[i][[1]]$model$coef[1]+
logged[,anattrait_simple[i]]*pgls_models_sig[i][[1]]$model$coef[2])
}
#split up model column
spltmodel<-strsplit(modellist_sig,"~")
traity<-unlist(lapply(spltmodel, `[[`, 1))
anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
anattraitx
# remove variable from within log
anattrait_simple<-numeric()
for(i in seq_along(anattraitx)){
anattrait_simple[i]<-gsub("[\\(\\)]", "", regmatches(anattraitx, gregexpr("\\(.*?\\)", anattraitx))[[i]])
}
logged<-limits%>% mutate_at(audio_pgls_results$Coefficients,log)
names(limits)
logged<-limits%>% mutate_at(TM:UH,log)
logged<-limits%>% mutate_at(vars(TM:UH),log)
View(logged)
for(i in seq_along(anattrait_simple)){
assign(paste0("slpline","_",as.character(i)),
pgls_models_sig[i][[1]]$model$coef[1]+
logged[,anattrait_simple[i]]*pgls_models_sig[i][[1]]$model$coef[2])
}
runplot_audio<-function(e){
p<-ggplot(limits,
aes_string(x = spltmodel[[e]][2], y = spltmodel[[e]][1]))+
theme_classic()+
theme(legend.position = "none")+
#      axis.text.y = element_blank(),
#      axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)+
geom_line(aes_string(x = anattraitx[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
p
}
runplot_audio(1)
runplot_audio(1)+
runplot_audio(2)
library(patchwork)
library(dplyr)
runplot_audio(1)+
runplot_audio(2)
spltmodel
modellist_sig
audio_pgls_results <-audio_pgls_results %>%
arrange(factor(audio_pgls_results$`Audiogram metric`),
factor(category,levels = c("Impedance match",
"Stiffness",
"Input/output areas",
"Auditory endorgan length",
"Columella size")),
desc(Adj_Rsquared))
audio_pgls_results$Model
#get model list from the results table (only significant results)
modellist_sig<-paste0(audio_pgls_results$`Audiogram metric`,"~",
audio_pgls_results$Coefficients)
pgls_models_sig<-lapply(modellist_sig,pgls_models)#run pgls
spltmodel<-strsplit(modellist_sig,"~")
traity<-unlist(lapply(spltmodel, `[[`, 1))
anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
# remove variable from within log
anattrait_simple<-numeric()
for(i in seq_along(anattraitx)){
anattrait_simple[i]<-gsub("[\\(\\)]", "", regmatches(anattraitx, gregexpr("\\(.*?\\)", anattraitx))[[i]])
}
#only keep significant relationships
audio_pgls_plt<-audio_pgls_plt %>% select(Model, Coefficients, P.val)%>%
filter(Coefficients!="(Intercept)" &
P.val <0.05)
#log transform anatomy data for the slope line
logged<-limits%>% mutate_at(vars(TM:UH),log)
for(i in seq_along(anattrait_simple)){
assign(paste0("slpline","_",as.character(i)),
pgls_models_sig[i][[1]]$model$coef[1]+
logged[,anattrait_simple[i]]*pgls_models_sig[i][[1]]$model$coef[2])
}
runplot_audio<-function(e){
p<-ggplot(limits,
aes_string(x = spltmodel[[e]][2], y = spltmodel[[e]][1]))+
theme_classic()+
theme(legend.position = "none")+
#      axis.text.y = element_blank(),
#      axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)+
geom_line(aes_string(x = anattraitx[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
p
}
runplot_audio(1)
runplot_audio(1)+
runplot_audio(2)+
runplot_audio(3)+
runplot_audio(4)+
runplot_audio(5)
runplot_audio(1)+
runplot_audio(2)+
runplot_audio(3)+
runplot_audio(4)+
runplot_audio(5)+
runplot_audio(6)+
runplot_audio(7)+
runplot_audio(8)+
runplot_audio(9)+
runplot_audio(10)+
runplot_audio(11)+
runplot_audio(12)+
runplot_audio(13)+
runplot_audio(14)+
runplot_audio(15)+
runplot_audio(16)+
runplot_audio(17)+
runplot_audio(18)+
plot_annotation(tag_levels = "A")
design<-"
ABCKL
DEFMN
GHIOP
J##QR
"
design<-"
ABCKL
DEFMN
GHIOP
J##QR
"
#PLOT ALL BEST FREQUENCY
runplot_audio(1)+
runplot_audio(2)+
runplot_audio(3)+
runplot_audio(4)+
runplot_audio(5)+
runplot_audio(6)+
runplot_audio(7)+
runplot_audio(8)+
runplot_audio(9)+
runplot_audio(10)+
runplot_audio(11)+
runplot_audio(12)+
runplot_audio(13)+
runplot_audio(14)+
runplot_audio(15)+
runplot_audio(16)+
runplot_audio(17)+
runplot_audio(18)+
plot_annotation(tag_levels = "A")+
plot_layout(design = design)
