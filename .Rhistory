library(png)
#earimg<-readPNG("C:/Users/jeffz/Desktop/ear.png", native = T)
#made data frame object
birdCDO<-comparative.data(phy = birdtreels,data = avgdf,#[avgdf$Category!="Terrestrial",]
names.col = Binomial,
vcv = TRUE, na.omit = FALSE,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
pgls_todo_hm
pgls_models_list1<-lapply(pgls_todo_hm,pgls_models)#run pgls
#pgls_todo_hm_w<- paste(pgls_todo_hm,"+waterbirds")
#pgls_models_list2<-lapply(pgls_todo_hm_w,pgls_models)#run pgls
#
pgls_todo_bm<- gsub("Head.mass..g.","bodymass",pgls_todo_hm)
pgls_models_list3<-lapply(pgls_todo_bm,pgls_models)#run pgls
#
#modellist_intra
#put in long format
longdfplotting<-gather(avgdf,key = "earmeasures", value = "earmeasureval",
-c(Binomial, Skull.width..mm.,Head.mass..g.,waterbirds, Order,
Family))#
longdfplotting$earmeasures<-as.factor(longdfplotting$earmeasures)
longdfplotting$earmeasureval<-as.numeric(longdfplotting$earmeasureval)
#longdfplotting$Orderpdonly<-ifelse(longdfplotting$Category== "Pursuit diving", longdfplotting$Binomial, "")
#longdfplotting$SW1<-ifelse(longdfplotting$Binomial == "Ardenna gravis", "Ardenna gravis", "")
#longdfplotting$SW2<-ifelse(longdfplotting$Binomial == "Ardenna_grisea", longdfplotting$Binomial, "")
#textdf <- longdfplotting[rbind(longdfplotting$Binomial == "Ardenna gravis",longdfplotting$Binomial,"")
#                               longdfplotting$Binomial =="Ardenna_grisea"), ]
pgls_todo_hm
splt_hm<-strsplit(pgls_todo_hm,"~")
splt_hm_anat<-numeric()
for (i in seq_along(splt_hm)){
splt_hm_anat[i]<-splt_hm[[i]][1]
}
splt_hm_anat
# remove variable from within log
splt_hm_anatsimple<-numeric()
for(i in seq_along(splt_hm_anat)){
splt_hm_anatsimple[i]<-gsub("[\\(\\)]", "", regmatches(splt_hm_anat, gregexpr("\\(.*?\\)", splt_hm_anat))[[i]])
}
splt_hm_anatsimple
#make list of ear measures to plot
yvarnames<-splt_hm_anatsimple
codes<-c(
"AR",
"Columella offset",
"Umbo height",
"TM angle",
"ECD length",
"TM area",
"FP area",
"RW area",
"ES length",
"Cranial air",
"Columella length",
"Columella volume",
"Body mass"
)
#Plotting functions for interaction model. takes the index of the 'yvarnames' list as an argument
options(scipen = 999)
#input geomcoff
runplot_HM_only<-function(e){
slopeline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$Head.mass..g.)*
(pgls_models_list1[e][[1]]$model$coef[2])
isoline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$Head.mass..g.)*
geomcoefs[e]
pval<-summary(pgls_models_list1[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste0(" R2 = ",signif(summary(pgls_models_list1[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
ggplot(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(Head.mass..g.), y = log(earmeasureval), label = Binomial),
factor = as.factor(waterbirds))+
theme_classic()+
theme(legend.position = "none",
#axis.text.x = element_blank(),
axis.title.x = element_blank())+{
if(hm$scalingtype[e*2] == "isometric")
geom_point(aes(shape = waterbirds), size = 2, col = "grey")
else if(hm$scalingtype[e*2] == "hypoallometric")
geom_point(aes(shape = waterbirds), size = 2, col = "blue")
else  if(hm$scalingtype[e*2] == "hyperallometric")
geom_point(aes(shape = waterbirds), size = 2, col = "red")
}  +
scale_color_manual(values=c("green","blue","darkgrey","l2ghtblue","green","darkgray","darkgreen","corns2lk4","blue"))+
geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(Head.mass..g.),y = slopeline), col = "black", size = 2)+
geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(Head.mass..g.),y = isoline), col = "grey", size = 2)+
ylab(paste0("log(",codes[e],")"))+
geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
hjust = hjust, vjust = vjust))+
ggtitle(categorylist[e])#+
#inset_element(p = earimg,
#              left = 0.8,
#              bottom = 0.1,
#              right = 1,
#              top = 0.2)
}
runplot_HM_only(3)
codes<-c(
"TM_FP",
"COff",
"UH",
"TMA",
"ECD",
"TM",
"FP",
"RW",
"ES",
"Air",
"CL",
"CV",
"BM"
)
options(scipen = 999)
#input geomcoff
runplot_HM_only<-function(e){
slopeline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$Head.mass..g.)*
(pgls_models_list1[e][[1]]$model$coef[2])
isoline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$Head.mass..g.)*
geomcoefs[e]
pval<-summary(pgls_models_list1[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste0(" R2 = ",signif(summary(pgls_models_list1[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
ggplot(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(Head.mass..g.), y = log(earmeasureval), label = Binomial),
factor = as.factor(waterbirds))+
theme_classic()+
theme(legend.position = "none",
#axis.text.x = element_blank(),
axis.title.x = element_blank())+{
if(hm$scalingtype[e*2] == "isometric")
geom_point(aes(shape = waterbirds), size = 2, col = "grey")
else if(hm$scalingtype[e*2] == "hypoallometric")
geom_point(aes(shape = waterbirds), size = 2, col = "blue")
else  if(hm$scalingtype[e*2] == "hyperallometric")
geom_point(aes(shape = waterbirds), size = 2, col = "red")
}  +
scale_color_manual(values=c("green","blue","darkgrey","l2ghtblue","green","darkgray","darkgreen","corns2lk4","blue"))+
geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(Head.mass..g.),y = slopeline), col = "black", size = 2)+
geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(Head.mass..g.),y = isoline), col = "grey", size = 2)+
ylab(paste0("log(",codes[e],")"))+
geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
hjust = hjust, vjust = vjust))+
ggtitle(categorylist[e])#+
#inset_element(p = earimg,
#              left = 0.8,
#              bottom = 0.1,
#              right = 1,
#              top = 0.2)
}
runplot_HM_only(3)
#export multipanel plot
runplot_HM_only(1)+
runplot_HM_only(2)+
runplot_HM_only(3)+
runplot_HM_only(4)+
runplot_HM_only(5)+
runplot_HM_only(6)+
runplot_HM_only(7)+
runplot_HM_only(8)+
runplot_HM_only(9)+
runplot_HM_only(10)+
runplot_HM_only(11)+
runplot_HM_only(12)+
runplot_HM_only(13) +plot_annotation(tag_levels = "A")
modellist_intra
spleet<-strsplit(modellist_intra,"~")
vecty<-numeric()
for (i in seq_along(spleet)){
vecty[i]<-spleet[[i]][1]
}
vecty
vectx<-numeric()
for (i in seq_along(spleet)){
vectx[i]<-spleet[[i]][2]
}
vectx
# remove variable from within log
vectxsimple<-numeric()
for(i in seq_along(vectx)){
vectxsimple[i]<-gsub("[\\(\\)]", "", regmatches(vectx, gregexpr("\\(.*?\\)", vectx))[[i]])
}
vectysimple<-numeric()
for(i in seq_along(vecty)){
vectysimple[i]<-gsub("[\\(\\)]", "", regmatches(vecty, gregexpr("\\(.*?\\)", vecty))[[i]])
}
pgls_models_list_intra<-lapply(modellist_intra,pgls_models)#run pgls
o<-avgdf%>% mutate_at(c(
"TMtotalarea",
"FPtotalarea",
"area_ratio",
"dis_coltip_TMcentroid",
"Umbo_distancetoTMplane",
"meanTMangle",
"RWtotalarea",
"totalECDlength",
"totalEClength",
"CAtotalarea",
"Behind.TM",
"Columella.length.mm",
"Columella.volume.mm3",
"bodymass"
),log)
oselect<-o[,c("waterbirds",
"TMtotalarea",
"FPtotalarea",
"area_ratio",
"dis_coltip_TMcentroid",
"Umbo_distancetoTMplane",
"meanTMangle",
"RWtotalarea",
"totalECDlength",
"totalEClength",
"CAtotalarea",
"Behind.TM",
"Columella.length.mm",
"Columella.volume.mm3",
"bodymass"
)]
codeintray<-c("TM area",
"Col offset",
"Umbo height",
"TM angle",
"RW area",
"ES length",
"Col length",
"Col length",
"FP area",
"TM area")
codeintrax<-c("FP area",
"TM area",
"TM area",
"TM area",
"FP area",
"Col length",
"Col volume",
"FP area",
"Col volume",
"Col volume")
#plot intra
for(i in seq_along(vecty)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_intra[i][[1]]$model$coef[1]+
oselect[,vectxsimple[i]]*pgls_models_list_intra[i][[1]]$model$coef[2])
assign(paste0("slplineiso_",as.character(i)),pgls_models_list_intra[i][[1]]$model$coef[1]+
oselect[,vectxsimple[i]]*geomcoefs_intra[i])
}
runplotpglsintra<-function(e){
pval<-summary(pgls_models_list_intra[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste0(" R2 = ",signif(summary(pgls_models_list_intra[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
p<-ggplot(oselect,
aes_string(x = vectxsimple[e], y = vectysimple[e]))+
theme_classic()+
theme(legend.position = "none")+{
if(intra$scalingtype[e*2] == "isometric")
geom_point(aes(shape = waterbirds), size = 2, col = "grey")
else if(intra$scalingtype[e*2] == "hypoallometric")
geom_point(aes(shape = waterbirds), size = 2, col = "blue")
else  if(intra$scalingtype[e*2] == "hyperallometric")
geom_point(aes(shape = waterbirds), size = 2, col = "red")
}  +
geom_line(aes_string(x = vectxsimple[e],
y = paste0("slplineiso_",as.character(e))),
col = "grey", size = 2)+
geom_line(aes_string(x = vectxsimple[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)+
geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
hjust = hjust, vjust = vjust))+
ggtitle(categorylist_intra[e])+
ylab(paste0("log(",codeintray[e],")"))+
xlab(paste0("log(",codeintrax[e],")"))
p
}
runplotpglsintra(2)
modellist_intra <- c(  "log(TMtotalarea)~log(FPtotalarea)",
"log(dis_coltip_TMcentroid)~log(TMtotalarea)",
"log(Umbo_distancetoTMplane)~log(TMtotalarea)",
"log(meanTMangle)~log(TMtotalarea)",
"log(RWtotalarea)~log(FPtotalarea)",
"log(totalEClength)~log(Columella.length.mm)",
"log(Columella.length.mm)~log(Columella.volume.mm3)",
"log(Columella.length.mm)~log(FPtotalarea)",#
"log(FPtotalarea)~log(Columella.volume.mm3)",#
"log(TMtotalarea)~log(Columella.volume.mm3)")
geomcoefs_intra<-c(1,
0.5,
0.5,
0,
1,
1,
0.33,
0.5,
0.67,
0.67)
categorylist_intra<-c(rep("Impedance match",5),
"Stiffness",
rep("Columella morphology",2),
rep("Columella inertia",2))
source("pgls_intraear.R")
runplotpglsintra(2)
library(dplyr)
library(patchwork)
###########
modellist_intra
spleet<-strsplit(modellist_intra,"~")
vecty<-numeric()
for (i in seq_along(spleet)){
vecty[i]<-spleet[[i]][1]
}
vecty
vectx<-numeric()
for (i in seq_along(spleet)){
vectx[i]<-spleet[[i]][2]
}
vectx
# remove variable from within log
vectxsimple<-numeric()
for(i in seq_along(vectx)){
vectxsimple[i]<-gsub("[\\(\\)]", "", regmatches(vectx, gregexpr("\\(.*?\\)", vectx))[[i]])
}
vectysimple<-numeric()
for(i in seq_along(vecty)){
vectysimple[i]<-gsub("[\\(\\)]", "", regmatches(vecty, gregexpr("\\(.*?\\)", vecty))[[i]])
}
pgls_models_list_intra<-lapply(modellist_intra,pgls_models)#run pgls
o<-avgdf%>% mutate_at(c(
"TMtotalarea",
"FPtotalarea",
"area_ratio",
"dis_coltip_TMcentroid",
"Umbo_distancetoTMplane",
"meanTMangle",
"RWtotalarea",
"totalECDlength",
"totalEClength",
"CAtotalarea",
"Behind.TM",
"Columella.length.mm",
"Columella.volume.mm3",
"bodymass"
),log)
oselect<-o[,c("waterbirds",
"TMtotalarea",
"FPtotalarea",
"area_ratio",
"dis_coltip_TMcentroid",
"Umbo_distancetoTMplane",
"meanTMangle",
"RWtotalarea",
"totalECDlength",
"totalEClength",
"CAtotalarea",
"Behind.TM",
"Columella.length.mm",
"Columella.volume.mm3",
"bodymass"
)]
codeintray<-c("TM area",
"Col offset",
"Umbo height",
"TM angle",
"RW area",
"ES length",
"Col length",
"Col length",
"FP area",
"TM area")
codeintrax<-c("FP area",
"TM area",
"TM area",
"TM area",
"FP area",
"Col length",
"Col volume",
"FP area",
"Col volume",
"Col volume")
#plot intra
for(i in seq_along(vecty)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_intra[i][[1]]$model$coef[1]+
oselect[,vectxsimple[i]]*pgls_models_list_intra[i][[1]]$model$coef[2])
assign(paste0("slplineiso_",as.character(i)),pgls_models_list_intra[i][[1]]$model$coef[1]+
oselect[,vectxsimple[i]]*geomcoefs_intra[i])
}
runplotpglsintra<-function(e){
pval<-summary(pgls_models_list_intra[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste0(" R2 = ",signif(summary(pgls_models_list_intra[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
p<-ggplot(oselect,
aes_string(x = vectxsimple[e], y = vectysimple[e]))+
theme_classic()+
theme(legend.position = "none")+{
if(intra$scalingtype[e*2] == "isometric")
geom_point(aes(shape = waterbirds), size = 2, col = "grey")
else if(intra$scalingtype[e*2] == "hypoallometric")
geom_point(aes(shape = waterbirds), size = 2, col = "blue")
else  if(intra$scalingtype[e*2] == "hyperallometric")
geom_point(aes(shape = waterbirds), size = 2, col = "red")
}  +
geom_line(aes_string(x = vectxsimple[e],
y = paste0("slplineiso_",as.character(e))),
col = "grey", size = 2)+
geom_line(aes_string(x = vectxsimple[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)+
geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
hjust = hjust, vjust = vjust))+
ggtitle(categorylist_intra[e])+
ylab(paste0("log(",codeintray[e],")"))+
xlab(paste0("log(",codeintrax[e],")"))
p
}
runplotpglsintra(2)
codeintray<-c("TM",
"COff",
"UH",
"TMA",
"RW",
"ES",
"CL",
"CL",
"FP",
"TM")
codeintrax<-c("FP",
"TM",
"TM",
"TM",
"FP",
"CL",
"CV",
"FP",
"CV",
"CV")
for(i in seq_along(vecty)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_intra[i][[1]]$model$coef[1]+
oselect[,vectxsimple[i]]*pgls_models_list_intra[i][[1]]$model$coef[2])
assign(paste0("slplineiso_",as.character(i)),pgls_models_list_intra[i][[1]]$model$coef[1]+
oselect[,vectxsimple[i]]*geomcoefs_intra[i])
}
runplotpglsintra<-function(e){
pval<-summary(pgls_models_list_intra[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste0(" R2 = ",signif(summary(pgls_models_list_intra[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
p<-ggplot(oselect,
aes_string(x = vectxsimple[e], y = vectysimple[e]))+
theme_classic()+
theme(legend.position = "none")+{
if(intra$scalingtype[e*2] == "isometric")
geom_point(aes(shape = waterbirds), size = 2, col = "grey")
else if(intra$scalingtype[e*2] == "hypoallometric")
geom_point(aes(shape = waterbirds), size = 2, col = "blue")
else  if(intra$scalingtype[e*2] == "hyperallometric")
geom_point(aes(shape = waterbirds), size = 2, col = "red")
}  +
geom_line(aes_string(x = vectxsimple[e],
y = paste0("slplineiso_",as.character(e))),
col = "grey", size = 2)+
geom_line(aes_string(x = vectxsimple[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)+
geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
hjust = hjust, vjust = vjust))+
ggtitle(categorylist_intra[e])+
ylab(paste0("log(",codeintray[e],")"))+
xlab(paste0("log(",codeintrax[e],")"))
p
}
runplotpglsintra(2)
runplotpglsintra(1)+
runplotpglsintra(2)+
runplotpglsintra(3)+
runplotpglsintra(4)+
runplotpglsintra(5)+
runplotpglsintra(6)+
runplotpglsintra(7)+
runplotpglsintra(8)+
runplotpglsintra(9)+
runplotpglsintra(10)+plot_annotation(tag_levels = "A")
