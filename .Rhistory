label = "**b: 1** (CV~HM)", hjust = 0)+
geom_path(aes(x = log(bm), y = log(three_d)))+
geom_richtext(aes(x = max(log(three_d)+0.1), y = max(log(three_d)*0.66)),
label = "**b: 0.66** (TM~CV,FP~CV,TM~HM)", hjust = 0)+
geom_path(aes(x = log(bm), y = log(three_d)*0.66))+
#geom_text(aes(x = max(log(three_d)+3), y = max(log(three_d)*0.66)),
#          label = "TM~CV,FP~CV", hjust = 0)+
geom_richtext(aes(x = max(log(three_d)+0.1), y = max(log(three_d)*0.5)),
label = "**b: 0.5** (UH~TM, COff~TM))", hjust = 0)+
geom_path(aes(x = log(bm), y = log(three_d)*0.5))+
geom_richtext(aes(x = max(log(three_d)+0.1), y = max(log(three_d)*0.33)),
label = "**b: 0.33** (mm~g)", hjust = 0)+
geom_path(aes(x = log(bm), y = log(three_d)*0.33))+
#angle vs 3D
geom_path(aes(x = log(bm), y = log(three_d)*0))+
geom_richtext(aes(x = max(log(three_d)+0.1), y = max(log(three_d)*0)),
label = "**b: 0.0** (degrees~g)", hjust = 0)+
geom_textabline(slope = 1, intercept = 0, label = "b:1",
hjust = 0.6, vjust = -0.2)+
geom_textabline(slope = 0.66, intercept = 0, label = "b:0.66",
hjust = 0.6, vjust = -0.2)+
geom_textabline(slope = 0.5, intercept = 0, label = "b:0.5",
hjust = 0.6, vjust = -0.2)+
geom_textabline(slope = 0.33, intercept = 0, label = "b:0.33",
hjust = 0.6, vjust = -0.2)+
geom_textabline(slope = 0, intercept = 0, label = "b:0",
hjust = 0.6, vjust = -0.2)+
#themes, scales
ylab("log(measure)")+
xlab("log(measure)")+
scale_x_continuous(limits = c(0,20), breaks = seq(0,10,2))+
scale_y_continuous(limits = c(-2,11))+
theme_minimal()+
theme(axis.text = element_blank(),
panel.grid = element_blank())
lineplot
inset+lineplot+plot_layout(widths = c(1,2))+
plot_annotation(tag_levels = 'A')
ylab("log(measure)")
scales
library(caper)
library(phytools)
library(ape)
library(dplyr)
library(ggpubr)
library(ggplot2)
library(tidyr)
################Set up data############
#set working directory and load data
setwd("C:/Users/jeffz/Desktop/scling/Scaling_2021")
#load main dataframe
df<-read.csv("databmadded.csv", stringsAsFactors = F, header = T) #, stringsAsFactors = FALSE
#The pgls model function, which will be applied to list of formulas
pgls_models<-function(i){
pglsfit<-pgls(as.formula(i), data = birdCDO, #check comparative data object here<---
lambda = 'ML', #find lambda using maximum likelihood
bounds = list(lambda=c(0.0001,1)))#####
}
#Some missing headmass values to be imputed using PGLS of skull width and head mass
df$Head.mass..g.
#Load phylogeny and correct names that were different between birdtree.org and the up-to-date species names
source("load phylogeny and make CDO.R")
#Computed head mass from head mass~skullwidth pgls
source("SW_HM_.R")#add phylogeny here
df$Head.mass..g.#with imputed values
#Since PGLS uses one point per species,I make the dataframe to have average values for species with more than one specimen:
#First I make a dataframe with only one species per line
distinctdf<-distinct(df, Binomial, .keep_all = TRUE)
distinctdforder<-arrange(distinctdf,Binomial)#sort by species name
#Next get averages by species for columns with continuous data
avgdf<-df %>% group_by(Binomial) %>%
summarise_at(vars(Skull.width..mm.:area_ratio),mean, na.rm = TRUE)
avgdf<-as.data.frame(avgdf)
#Now we add back columns from the distinctdf dataframe which don't require averaging
avgdf$Species<-distinctdforder$Species
avgdf$Low.Hz<-distinctdforder$Low.Hz
avgdf$Order<-distinctdforder$Order
avgdf$Family<-distinctdforder$Family
avgdf$maxdivedepth<-distinctdforder$max
avgdf$Category<-as.character(distinctdforder$Category)
avgdf$birdtree<-gsub(" ","_",distinctdforder$Birdtree)
#avgdf$Behind.TM<-distinctdforder$Behind.TM
avgdf$bodymass<-distinctdforder$bodymass_lit
avgdf$aud_spp<-distinctdforder$spp_audio
avgdf$aud_rel<-distinctdforder$audio_relation
avgdf$superorder<-avgdf$Order
avgdf$superorder[avgdf$Order=="Passeriformes"|
avgdf$Order=="Falconiformes"|
avgdf$Order=="Psittaciformes"]<-"Australaves"
avgdf$superorder[avgdf$Order=="Coraciiformes"|
avgdf$Order=="Piciformes"|
avgdf$Order=="Bucerotiformes"|
avgdf$Order=="Coliiformes"]<-"Coraciimorphae"
avgdf$superorder[avgdf$Order=="Suliformes"|
avgdf$Order=="Sphenisciformes"|
avgdf$Order=="Charadriiformes"|
avgdf$Order=="Procellariiformes"|
avgdf$Order=="Gaviiformes"|
avgdf$Order=="Pelecaniformes"|
avgdf$Order=="Phoenicopteriformes"|
avgdf$Order=="Phaethontiformes"]<-"Aequorlitornithes"
avgdf$superorder[avgdf$Order=="Columbiformes"|
avgdf$Order=="Cuculiformes"|
avgdf$Order=="Musophagiformes"]<-"Columbaves"
avgdf$superorder[avgdf$Order=="Galliformes"|
avgdf$Order=="Anseriformes"]<-"Galloanserae"
avgdf$superorder[avgdf$Order=="Struthioniformes"|
avgdf$Order=="Cassuariiformes"]<-"Paleognathae"
avgdf$waterbirds<-ifelse(avgdf$superorder=="Aequorlitornithes","Aequorlitornithes","not Aequelornithes")
#make comparative data frame object
birdCDO<-comparative.data(phy = birdtreels,data = avgdf,#[avgdf$Category!="Terrestrial",]
names.col = Binomial,
vcv = TRUE, na.omit = FALSE,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
#########scaling intraear##########
#set up intra-ear analyses
modellist_intra <- c(  "log(TMtotalarea)~log(FPtotalarea)",
"log(dis_coltip_TMcentroid)~log(TMtotalarea)",
"log(Umbo_distancetoTMplane)~log(TMtotalarea)",
"log(meanTMangle)~log(TMtotalarea)",
"log(RWtotalarea)~log(FPtotalarea)",
"log(totalEClength)~log(Columella.length.mm)",
"log(Columella.length.mm)~log(Columella.volume.mm3)",
"log(Columella.length.mm)~log(FPtotalarea)",#
"log(FPtotalarea)~log(Columella.volume.mm3)",#
"log(TMtotalarea)~log(Columella.volume.mm3)")
geomcoefs_intra<-c(1,
0.5,
0.5,
0,
1,
1,
0.33,
0.5,
0.67,
0.67)
#list of functional categories for table
categorylist_intra<-c(rep("Impedance match",5),
"Stiffness",
rep("Columella morphology",2),
rep("Columella inertia",2))
#run the
source("pgls_intraear.R")
#visualize the table better using the flextable package
flexall<-flextable(intra) %>%
add_header_lines(  values = "Table X. Models for selection") %>%
#bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
tbllist_intra
tbllist_intra[[1]]
tbllist_intra[[1]][6]
pgls_models_list
pgls_models_list[[1]]
View(intra)
intra<-do.call(rbind.data.frame,tbllist_intra)
intra$Estimate-intra$`Std. Error`*1.96
intra<-do.call(rbind.data.frame,tbllist_intra)
intra$CI95_low<-intra$Estimate-intra$`Std. Error`*1.96
intra$CI95_high<-intra$Estimate+intra$`Std. Error`*1.96
intra$geometric_exp<-rep(geomcoefs_intra,each =2)
intra$category<-rep(categorylist_intra,each = 2)
intra$scalingtype<-ifelse(intra$CI95_high<intra$geometric_exp,"hypoallometric",
"other")
intra$scalingtype<-ifelse(intra$CI95_low>intra$geometric_exp,"hyperallometric",
intra$scalingtype)
intra$scalingtype<-ifelse(intra$CI95_high>intra$geometric_exp&intra$CI95_low<intra$geometric_exp,"isometric",
intra$scalingtype)
intra$Estimate-intra$geometric_exp
intra$pval<-intra$Estimate-intra$geometric_exp
intra$tval<-intra$Estimate-intra$geometric_exp/intra$`Std. Error`
?pt
pgls_models_list[[1]]
summary(pgls_models_list[[1]])
summary(pgls_models_list[[2]])
View(tbllist_intra)
tbllist_intra[[1]]
summary(pgls_models_list[[2]])
(0.46969-0)/0.03721
pt(12.62268,120)
pt(12.62268,df = 120)
pt(12.62268,120, lower.tail = FALSE)
summary(pgls_models_list[[1]])
summary(pgls_models_list[[3]])
summary(pgls_models_list[[4]])
2*pt(q=-0.3794, df=120, lower.tail=FALSE)
pt(q=-0.3794, df=120, lower.tail=FALSE)
pt(q=-0.3794, df=120, lower.tail=TRUE)
summary(pgls_models_list[[4]])
-0.3794/0.044641
str(summary(pgls_models_list[[4]]))
summary(pgls_models_list[[4]])
pt(q=0.3794, df=120, lower.tail=TRUE)
pgls_models_list[[4]]$residuals
length(pgls_models_list[[4]]$residuals)
summary(pgls_models_list[[4]])
?pt
?t.test
2*pt(-abs(-0.3794),df=120)
2*pt(abs(-0.3794),df=120)
abs(-0.37)
-abs(-0.37)
summary(pgls_models_list[[4]])
2*pt(abs(-0.3794),df=120)
2*pt(-abs(-0.3794),df=120)
2*pt(-abs(18.2506),df=120)
summary(pgls_models_list[[5]])
summary(pgls_models_list[[6]])
summary(pgls_models_list[[6]])
2*pt(-abs(0.3724),df=120)
2*pt(-abs(0.8954),df=120)
2*pt(abs(0.8954),df=120)
2*pt(abs(0.8954),df=120, lower.tail = FALSE)
2*pt(abs(0.8954),df=120, lower.tail = FALSE)
summary(pgls_models_list[[4]])
2*pt(abs(-0.3794),df=120, lower.tail = FALSE)
2*pt(abs(intra$tval),df=intra$Fstat_dendf, lower.tail = FALSE)
intra = subset(intra, select = c(category,Model,Coefficients,geometric_exp,Estimate, CI95_low,
CI95_high,scalingtype,pval,Adj_Rsquared,Lambda))
flexall<-flextable(intra) %>% add_header_lines(
values = "Table X. Models for selection") %>%
#bold(i = ~ ChangeAIC < 0.01) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
#The pgls model function, which will be applied to list of formulas
pgls_models<-function(i){
pglsfit<-pgls(as.formula(i), data = birdCDO, #check comparative data object here<---
lambda = 'ML', #find lambda using maximum likelihood
bounds = list(lambda=c(0.001,1)))#####
}
pgls_models_list<-lapply(modellist_intra,pgls_models)#run pgls
#make list of dataframes with the PGLS outputs.
tbllist_intra<-list()
for (i in seq_along(pgls_models_list)){#change th 'Model' colume in this as appropriate
#put stats outputs into dataframe
tbllist_intra[[i]]<-as.data.frame(summary(pgls_models_list[[i]])$'coefficients')
tbllist_intra[[i]]$Adj_Rsquared<-summary(pgls_models_list[[i]])$'adj.r.squared'[1]#rsquared
tbllist_intra[[i]]$Model<-modellist_intra[i]#formula<_____________________CHECK FORMULA LIST HERE is correct
tbllist_intra[[i]]$Lambda<-summary(pgls_models_list[[i]])$'param'[[2]]#lambda
tbllist_intra[[i]]$Fstat<-summary(pgls_models_list[[i]])$fstatistic[1]
tbllist_intra[[i]]$Fstat_numdf<-summary(pgls_models_list[[i]])$fstatistic[2]
tbllist_intra[[i]]$Fstat_dendf<-summary(pgls_models_list[[i]])$fstatistic[3]
tbllist_intra[[i]]$AICc<-pgls_models_list[[i]]$aicc[1]
}
#organize the dataframe table (significant digits, remove redundant F stat & R squared)
for(i in seq_along(tbllist_intra)){
tbllist_intra[[i]]$Coefficients<-row.names(tbllist_intra[[i]])
#identify numeric cols and character cols to apply the significant digits function
character_cols<-unlist(lapply(tbllist_intra[[i]], is.character))
numeric_cols <- unlist(lapply(tbllist_intra[[i]], is.numeric))# Identify numeric columns
tbllist_intra[[i]]<-cbind(tbllist_intra[[i]][,which(character_cols)],signif(tbllist_intra[[i]][,which(numeric_cols)], digits = 2))
colnames(tbllist_intra[[i]])[6]<-"P.val"#rename b/c flextable doesn't work will with the '>' sign
row.names(tbllist_intra[[i]])<-c()#remove row names
print(tbllist_intra[[i]])
}
intra<-do.call(rbind.data.frame,tbllist_intra)
intra$CI95_low<-intra$Estimate-intra$`Std. Error`*1.96
intra$CI95_high<-intra$Estimate+intra$`Std. Error`*1.96
intra$geometric_exp<-rep(geomcoefs_intra,each =2)
intra$category<-rep(categorylist_intra,each = 2)
intra$scalingtype<-ifelse(intra$CI95_high<intra$geometric_exp,"hypoallometric",
"other")
intra$scalingtype<-ifelse(intra$CI95_low>intra$geometric_exp,"hyperallometric",
intra$scalingtype)
intra$scalingtype<-ifelse(intra$CI95_high>intra$geometric_exp&intra$CI95_low<intra$geometric_exp,"isometric",
intra$scalingtype)
intra$tval<-intra$Estimate-intra$geometric_exp/intra$`Std. Error`#t-value of differnce between estimate and isometric slope
intra$pval<-2*pt(abs(intra$tval),df=intra$Fstat_dendf, lower.tail = FALSE)#two tailed p-val
#subset the columns to present concise paper
intra = subset(intra, select = c(category,Model,Coefficients,geometric_exp,Estimate, CI95_low,
CI95_high,scalingtype,pval,Adj_Rsquared,Lambda))
#visualize the table better using the flextable package
flexall<-flextable(intra) %>% add_header_lines(
values = "Table X. Models for selection") %>%
#bold(i = ~ ChangeAIC < 0.01) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
intra = subset(intra, select = c(category,Model,Coefficients,geometric_exp,Estimate, CI95_low,
CI95_high,scalingtype,tval,pval,Adj_Rsquared,Lambda))
intra$tval<-intra$Estimate-intra$geometric_exp/intra$`Std. Error`#t-value of differnce between estimate and isometric slope
intra$`Std. Error`
names(intra)
pgls_models_list[[i]]$model
pgls_models_list[[4]]$model
str(summary(pgls_models_list[[4]])
)
pgls_models_list[[4]]$coefficients
pgls_models_list[[4]]$model$coefficients
pgls_models_list[[4]]$coefficients
summary(pgls_models_list[[4]])$coefficients
summary(pgls_models_list[[4]])$coefficients[,2]
tbllist_intra[[1]]
tbllist_intra[[1]] %>% View()
tbllist_intra<-list()
for (i in seq_along(pgls_models_list)){#change th 'Model' colume in this as appropriate
#put stats outputs into dataframe
tbllist_intra[[i]]<-as.data.frame(summary(pgls_models_list[[i]])$'coefficients')
tbllist_intra[[i]]$Adj_Rsquared<-summary(pgls_models_list[[i]])$'adj.r.squared'[1]#rsquared
tbllist_intra[[i]]$Model<-modellist_intra[i]#formula<_____________________CHECK FORMULA LIST HERE is correct
tbllist_intra[[i]]$Lambda<-summary(pgls_models_list[[i]])$'param'[[2]]#lambda
tbllist_intra[[i]]$Fstat<-summary(pgls_models_list[[i]])$fstatistic[1]
tbllist_intra[[i]]$Fstat_numdf<-summary(pgls_models_list[[i]])$fstatistic[2]
tbllist_intra[[i]]$Fstat_dendf<-summary(pgls_models_list[[i]])$fstatistic[3]
tbllist_intra[[i]]$AICc<-pgls_models_list[[i]]$aicc[1]
}
tbllist_intra[[1]] %>% View()
for(i in seq_along(tbllist_intra)){
tbllist_intra[[i]]$Coefficients<-row.names(tbllist_intra[[i]])
#identify numeric cols and character cols to apply the significant digits function
character_cols<-unlist(lapply(tbllist_intra[[i]], is.character))
numeric_cols <- unlist(lapply(tbllist_intra[[i]], is.numeric))# Identify numeric columns
tbllist_intra[[i]]<-cbind(tbllist_intra[[i]][,which(character_cols)],signif(tbllist_intra[[i]][,which(numeric_cols)], digits = 2))
colnames(tbllist_intra[[i]])[6]<-"P.val"#rename b/c flextable doesn't work will with the '>' sign
row.names(tbllist_intra[[i]])<-c()#remove row names
print(tbllist_intra[[i]])
}
tbllist_intra[[1]] %>% View()
intra<-do.call(rbind.data.frame,tbllist_intra)
View(intra)
names(intra)
intra<-do.call(rbind.data.frame,tbllist_intra)
intra$CI95_low<-intra$Estimate-intra$`Std. Error`*1.96
intra$CI95_high<-intra$Estimate+intra$`Std. Error`*1.96
intra$geometric_exp<-rep(geomcoefs_intra,each =2)
intra$category<-rep(categorylist_intra,each = 2)
intra$scalingtype<-ifelse(intra$CI95_high<intra$geometric_exp,"hypoallometric",
"other")
intra$scalingtype<-ifelse(intra$CI95_low>intra$geometric_exp,"hyperallometric",
intra$scalingtype)
intra$scalingtype<-ifelse(intra$CI95_high>intra$geometric_exp&intra$CI95_low<intra$geometric_exp,"isometric",
intra$scalingtype)
names(intra)
intra$Estimate-intra$geometric_exp/intra$`Std. Error`
intra$tval<-intra$Estimate-intra$geometric_exp/intra$`Std. Error`#t-value of differnce between estimate and isometric slope
intra$pval<-2*pt(abs(intra$tval),df=intra$Fstat_dendf, lower.tail = FALSE)#two tailed p-val
intra <- subset(intra, select = c(category,Model,Coefficients,geometric_exp,Estimate, CI95_low,
CI95_high,scalingtype,tval,pval,Adj_Rsquared,Lambda))
flexall<-flextable(intra) %>% add_header_lines(
values = "Table X. Models for selection") %>%
#bold(i = ~ ChangeAIC < 0.01) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
0/500
intra<-do.call(rbind.data.frame,tbllist_intra)
intra$CI95_low<-intra$Estimate-intra$`Std. Error`*1.96
intra$CI95_high<-intra$Estimate+intra$`Std. Error`*1.96
intra$geometric_exp<-rep(geomcoefs_intra,each =2)
intra$category<-rep(categorylist_intra,each = 2)
intra$scalingtype<-ifelse(intra$CI95_high<intra$geometric_exp,"hypoallometric",
"other")
intra$scalingtype<-ifelse(intra$CI95_low>intra$geometric_exp,"hyperallometric",
intra$scalingtype)
intra$scalingtype<-ifelse(intra$CI95_high>intra$geometric_exp&intra$CI95_low<intra$geometric_exp,"isometric",
intra$scalingtype)
intra$tval<-intra$Estimate-intra$geometric_exp/intra$`Std. Error`#t-value of differnce between estimate and isometric slope
intra$pval<-2*pt(abs(intra$tval),df=intra$Fstat_dendf, lower.tail = FALSE)#two tailed p-val
1.0-1.0
intra$tval<-(intra$Estimate-intra$geometric_exp)/intra$`Std. Error`#t-value of differnce between estimate and isometric slope
intra$pval<-2*pt(abs(intra$tval),df=intra$Fstat_dendf, lower.tail = FALSE)#two tailed p-val
intra <- subset(intra, select = c(category,Model,Coefficients,geometric_exp,Estimate, CI95_low,
CI95_high,scalingtype,tval,pval,Adj_Rsquared,Lambda))
names(intra)
flexall<-flextable(intra) %>% add_header_lines(
values = "Table X. Models for selection") %>%
bold(i = ~ pval < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
source("pgls_HM.R")#creates dataframe with results 'hm'
####visualize the table better using the flextable package####
flexall<-flextable(hm) %>%
add_header_lines(  values = "Table X. Models for selection") %>%
#bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
####list of pgls models to run (only models with head mass are used)####
pgls_todo_nogeomet <- c(
"log(area_ratio)~log(Skull.width..mm.)",
"log(area_ratio)~log(Head.mass..g.)",
"log(dis_coltip_TMcentroid)~log(Skull.width..mm.)",
"log(dis_coltip_TMcentroid)~log(Head.mass..g.)",
"log(Umbo_distancetoTMplane)~log(Skull.width..mm.)",
"log(Umbo_distancetoTMplane)~log(Head.mass..g.)",
"log(meanTMangle)~log(Skull.width..mm.)",
"log(meanTMangle)~log(Head.mass..g.)",
"log(totalECDlength)~log(Skull.width..mm.)",
"log(totalECDlength)~log(Head.mass..g.)",
"log(TMtotalarea)~log(Skull.width..mm.)",
"log(TMtotalarea)~log(Head.mass..g.)",#
"log(FPtotalarea)~log(Skull.width..mm.)",
"log(FPtotalarea)~log(Head.mass..g.)",#
"log(RWtotalarea)~log(Skull.width..mm.)",
"log(RWtotalarea)~log(Head.mass..g.)",
"log(totalEClength)~log(Skull.width..mm.)",
"log(totalEClength)~log(Head.mass..g.)",
"log(Behind.TM)~log(Skull.width..mm.)",
"log(Behind.TM)~log(Head.mass..g.)",#
"log(Columella.length.mm)~log(Skull.width..mm.)",
"log(Columella.length.mm)~log(Head.mass..g.)",
"log(Columella.volume.mm3)~log(Skull.width..mm.)",
"log(Columella.volume.mm3)~log(Head.mass..g.)",
"log(Columella.volume.mm3)~log(Skull.width..mm.)",
"log(bodymass)~log(Head.mass..g.)")
#select models with head mass
pgls_todo_hm<-pgls_todo_nogeomet[seq(2,length(pgls_todo_nogeomet),2)]
####list of expected geometric coefficients for___###
geomcoefs<-c(0,#impedance-matching
0.33,
0.33,
0,
0.33,#auditory endorgan
0.67,#input/output areas
0.67,
0.67,
0.33,#stiffness
1,
0.33,#columella size
1,
1)
#######functional category list#######
categorylist<-c(rep("Impedance matching",4),
"Auditory endorgan length",
rep("Input/output areas",3),
rep("Stiffness",2),
rep("Columella size",2),
"Body size")
############RUN PGLS############
####scaling vs head mass########
source("pgls_HM.R")#creates dataframe with results 'hm'
####visualize the table better using the flextable package####
flexall<-flextable(hm) %>%
add_header_lines(  values = "Table X. Models for selection") %>%
#bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
hm%>%View()
hm<-do.call(rbind.data.frame,tbllist_HM)
hm$CI95_low<-hm$Estimate-hm$`Std. Error`*1.96
hm$CI95_high<-hm$Estimate+hm$`Std. Error`*1.96
hm$geometric_exp<-rep(geomcoefs,each =2)
hm$category<-rep(categorylist,each = 2)
hm$scalingtype<-ifelse(hm$CI95_high<hm$geometric_exp,"hypoallometric",
"other")
hm$scalingtype<-ifelse(hm$CI95_low>hm$geometric_exp,"hyperallometric",
hm$scalingtype)
hm$scalingtype<-ifelse(hm$CI95_high>hm$geometric_exp&hm$CI95_low<hm$geometric_exp,"isometric",
hm$scalingtype)
hm%>%View()
hm$tval<-(hm$Estimate-hm$geometric_exp)/hm$`Std. Error`#t-value of differnce between estimate and isometric slope
hm$pval<-2*pt(abs(hm$tval),df=hm$Fstat_dendf, lower.tail = FALSE)#two tailed p-val
hm <- subset(hm, select = c(category,Model,Coefficients,
geometric_exp,Estimate, CI95_low,
CI95_high,scalingtype,tval,pvalAdj_Rsquared,Lambda))
hm <- subset(hm, select = c(category,Model,Coefficients,
geometric_exp,Estimate, CI95_low,
CI95_high,scalingtype,tval,pval,Adj_Rsquared,Lambda))
flexall<-flextable(hm) %>%
add_header_lines(  values = "Table X. Models for selection") %>%
#bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
flexall<-flextable(hm) %>%
add_header_lines(  values = "Table X. Models for selection") %>%
bold(i = ~ pval < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
signif(hm$pval,digits = 2)
?options
options(scipen = 6)
signif(hm$pval,digits = 2)
options(scipen = 1000)
signif(hm$pval,digits = 2)
options(scipen = 100)
signif(hm$pval,digits = 2)
?round()
x2 <- pi * 100^(-1:3)
x2
round(x2,3)
signif(x2,3)
round(hm$pval,digits = 5)
hm$pval<-round(hm$pval,digits = 5)
hm <- subset(hm, select = c(category,Model,Coefficients,
geometric_exp,Estimate, CI95_low,
CI95_high,scalingtype,tval,pval,Adj_Rsquared,Lambda))
#visualize the table better using the flextable package
flexall<-flextable(hm) %>%
add_header_lines(  values = "Table X. Models for selection") %>%
bold(i = ~ pval < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
writeClipboard(hm)
toprint<-read_docx() #create word doc object
body_add_flextable(toprint,flexall)#add pgls output table
body_end_section_landscape(toprint)
setwd("C:/Users\jeffz/Documents/")
setwd("C:/Users/jeffz/Documents/")
print(toprint,target = "pgls_hm_all Mar 28 2022.docx")
source("pgls_intraear.R")
#visualize the table better using the flextable package
flexall<-flextable(intra) %>%
add_header_lines(  values = "Table X. Models for selection") %>%
#bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
#write table to word file
toprint<-read_docx() #create word doc object
body_add_flextable(toprint,flexall)#add pgls output table
body_end_section_landscape(toprint)
#write.csv(intra,"E:/Analysis_plots/scalingintra feb 17.csv")
print(toprint,target = "pgls_intra_scaling all_Mar 28 2022.docx")
#print(toprint,target = "E:/Analysis_plots/pgls_intra_scaling watermar17.docx")
