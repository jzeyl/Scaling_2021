pval<-summary(pgls_models_list_intra[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste0(" R2 = ",signif(summary(pgls_models_list_intra[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
p<-ggplot(o,
aes_string(x = vectxsimple[e], y = vectysimple[e]))+
theme_classic()+
theme(legend.position = "none")+{
if(intra$scalingtype[e] == "Iso")
geom_point(aes(), size = 2, col = "grey")
else if(intra$scalingtype[e] == "Hypo")
geom_point(aes(), size = 2, col = "blue")
else  if(intra$scalingtype[e] == "Hyper")
geom_point(aes(), size = 2, col = "red")
}  +
#geom_line(aes_string(x = vectxsimple[e],#isometric slope line
#                     y = paste0("slplineiso_",as.character(e))),
#          col = "grey", size = 2)+
geom_line(aes_string(x = vectxsimple[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)+
#geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
#                         hjust = hjust, vjust = vjust))+
annotate(geom = 'text', x = Inf, y = -Inf, label = paste('R^2 == ',signif(summary(pgls_models_list_intra[[e]])$r.squared,2)), hjust = "inward", vjust = -0.5, parse = TRUE)+
#ggtitle(categorylist_intra[e])+
ylab(paste0("log(",vectysimple[e],")"))+
xlab(paste0("log(",vectxsimple[e],")"))
p
}
runplotpglsintra(2)
layt<-"
12345
6789A
"
runplotpglsintra(1)+
runplotpglsintra(2)+
runplotpglsintra(3)+
runplotpglsintra(4)+
runplotpglsintra(5)+
runplotpglsintra(6)+
runplotpglsintra(7)+
runplotpglsintra(8)+
runplotpglsintra(9)+
runplotpglsintra(10)+plot_annotation(tag_levels = "A")+
plot_layout(design = layt)
modellist_intra
intra$ymodel_nolog
modellist_intra<-paste0("log(",intra$ymodel_nolog,")~log(",
intra$Coefficients,")")
modellist_intra
pgls_models_list_intra<-lapply(modellist_intra,pgls_models)#run pgls
spleet<-strsplit(modellist_intra,"~")
vecty<-numeric()
for (i in seq_along(spleet)){
vecty[i]<-spleet[[i]][1]
}
vecty
vectx<-numeric()
for (i in seq_along(spleet)){
vectx[i]<-spleet[[i]][2]
}
vectx
# remove the "log" from each character string
vectysimple<-numeric()
for(i in seq_along(vecty)){
vectysimple[i]<-gsub("[\\(\\)]", "", regmatches(vecty, gregexpr("\\(.*?\\)", vecty))[[i]])
}
vectxsimple<-numeric()
for(i in seq_along(vectx)){
vectxsimple[i]<-gsub("[\\(\\)]", "", regmatches(vectx, gregexpr("\\(.*?\\)", vectx))[[i]])
}
#logtransform measures of interest
o<-avgdf%>% mutate_at(c(
"TM",
"FP",
"TM_FP",
"COffset",
"UH",
"TMA",
"RW",
"ECD",
"ES",
"Air",
"CL",
"CV",
"BM_lit"
),log)
#extract slope lines from pgls models
for(i in seq_along(vecty)){
assign(paste0("slpline","_",as.character(i)),
pgls_models_list_intra[i][[1]]$model$coef[1]+
o[,vectxsimple[i]]*pgls_models_list_intra[i][[1]]$model$coef[2])
assign(paste0("slplineiso_",as.character(i)),pgls_models_list_intra[i][[1]]$model$coef[1]+
o[,vectxsimple[i]]*geomcoefs_intra[i])
}
runplotpglsintra<-function(e){
pval<-summary(pgls_models_list_intra[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste0(" R2 = ",signif(summary(pgls_models_list_intra[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
p<-ggplot(o,
aes_string(x = vectxsimple[e], y = vectysimple[e]))+
theme_classic()+
theme(legend.position = "none")+{
if(intra$scalingtype[e] == "Iso")
geom_point(aes(), size = 2, col = "grey")
else if(intra$scalingtype[e] == "Hypo")
geom_point(aes(), size = 2, col = "blue")
else  if(intra$scalingtype[e] == "Hyper")
geom_point(aes(), size = 2, col = "red")
}  +
#geom_line(aes_string(x = vectxsimple[e],#isometric slope line
#                     y = paste0("slplineiso_",as.character(e))),
#          col = "grey", size = 2)+
geom_line(aes_string(x = vectxsimple[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)+
#geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
#                         hjust = hjust, vjust = vjust))+
annotate(geom = 'text', x = Inf, y = -Inf, label = paste('R^2 == ',signif(summary(pgls_models_list_intra[[e]])$r.squared,2)), hjust = "inward", vjust = -0.5, parse = TRUE)+
#ggtitle(categorylist_intra[e])+
ylab(paste0("log(",vectysimple[e],")"))+
xlab(paste0("log(",vectxsimple[e],")"))
p
}
runplotpglsintra(2)
layt<-"
12345
6789A
"
runplotpglsintra(1)+
runplotpglsintra(2)+
runplotpglsintra(3)+
runplotpglsintra(4)+
runplotpglsintra(5)+
runplotpglsintra(6)+
runplotpglsintra(7)+
runplotpglsintra(8)+
runplotpglsintra(9)+
runplotpglsintra(10)+plot_annotation(tag_levels = "A")+
plot_layout(design = layt)
ggsave(file=paste0(choose.dir(),"/scatter_intra jun 6.svg"),
width=10, height=5)
pgls_todo_hm<- c("log(TM_FP)~log(HM)",
"log(COffset)~log(HM)",
"log(UH)~log(HM)",
"log(TMA)~log(HM)",
"log(ECD)~log(HM)",
"log(TM)~log(HM)",#
"log(FP)~log(HM)",#
"log(RW)~log(HM)",
"log(ES)~log(HM)",
"log(Air)~log(HM)",#
"log(CL)~log(HM)",
"log(CV)~log(HM)")
####list of expected geometric coefficients for___###
geomcoefs<-c(0,#impedance-matching
0.33,
0.33,
0,
0.33,#auditory endorgan
0.67,#input/output areas
0.67,
0.67,
0.33,#stiffness
1,
0.33,#columella size
1)
#######functional category list
categorylist<-c(rep("Impedance matching",4),
"Auditory endorgan length",
rep("Input/output areas",3),
rep("Stiffness",2),
rep("Columella size",2))
#creates list of model outputs 'pgls_model_list'
#dataframe with results 'hm'
source("pgls_HM.R")
#################formatting table
#remove intercept estimates, drop model column,
#only keep significant relationships
#combine estimate +/- 95 CI into one cell
hm$pglsslope<-paste0(hm$Estimate," (",
format(round(hm$CI95_low, 3), nsmall = 3),
",",
format(round(hm$CI95_high, 3), nsmall = 3),
")")
#split up the model formula to get x and y components
splitmodel<-strsplit(hm$Model,"~")
hm$ymodel<-map(splitmodel,1)#left side of formula
# remove the "log" from each character string
hm$ymodel_nolog<-numeric()
for(i in seq_along(hm$ymodel)){
hm$ymodel_nolog[i]<-gsub("[\\(\\)]", "", regmatches(hm$ymodel, gregexpr("\\(.*?\\)", hm$ymodel))[[i]])
}
options(scipen = 100, digits = 2)
hm<-hm %>% select(category, ymodel_nolog,Coefficients,
geometric_exp, pglsslope,scalingtype,Adj_Rsquared,pval, Lambda) %>%
filter(Coefficients!="(Intercept)")
# remove the "log" from 'Coefficients'
#hm$xmodel_nolog<-numeric()
for(i in seq_along(hm$Coefficients)){
hm$Coefficients[i]<-gsub("[\\(\\)]", "", regmatches(hm$Coefficients, gregexpr("\\(.*?\\)", hm$Coefficients))[[i]])
}
#sort table by category and then adjusted R2
hm$category<-as.factor(hm$category)
hm<-arrange(hm,factor(hm$category, levels = c(
"Columella size",
"Auditory endorgan length",
"Input/output areas",
"Stiffness",
"Impedance match")),desc(Adj_Rsquared)
)
hm$pval<-format(round(hm$pval, 3), nsmall = 3)
####visualize the table better using the flextable package
flexall<-flextable(hm) %>%
add_header_lines(  values = "Table X. Models for selection") %>%
#bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
library(ggplot2)
library(ggrepel)
library(cowplot)
library(gridGraphics)
library(patchwork)
library(png)
#earimg<-readPNG("C:/Users/jeffz/Desktop/ear.png", native = T)
#made data frame object
birdCDO<-comparative.data(phy = birdtreels,data = avgdf,#[avgdf$Category!="Terrestrial",]
names.col = Binomial,
vcv = TRUE, na.omit = FALSE,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
#order of plots is set here, based on the hm dataframe
pgls_todo_hm<-paste0("log(",hm$ymodel_nolog,")~log(HM)")
pgls_models_list1<-lapply(pgls_todo_hm,pgls_models)#run pgls
#pgls_todo_hm_w<- paste(pgls_todo_hm,"+waterbirds")
#pgls_models_list2<-lapply(pgls_todo_hm_w,pgls_models)#run pgls
#
#pgls_todo_bm<- gsub("HM","bodymass",pgls_todo_hm)
#pgls_models_list3<-lapply(pgls_todo_bm,pgls_models)#run pgls
#
#modellist_intra
#put in long format
longdfplotting<-gather(avgdf,key = "earmeasures", value = "earmeasureval",
-c(Binomial, Skull.width..mm.,HM, Order,
Family))#
longdfplotting$earmeasures<-as.factor(longdfplotting$earmeasures)
longdfplotting$earmeasureval<-as.numeric(longdfplotting$earmeasureval)
pgls_todo_hm
splt_hm<-strsplit(pgls_todo_hm,"~")
splt_hm_anat<-numeric()
for (i in seq_along(splt_hm)){
splt_hm_anat[i]<-splt_hm[[i]][1]
}
splt_hm_anat
# remove variable from within log
splt_hm_anatsimple<-numeric()
for(i in seq_along(splt_hm_anat)){
splt_hm_anatsimple[i]<-gsub("[\\(\\)]", "", regmatches(splt_hm_anat, gregexpr("\\(.*?\\)", splt_hm_anat))[[i]])
}
splt_hm_anatsimple
#make list of ear measures to plot
yvarnames<-splt_hm_anatsimple
codes<-hm$ymodel_nolog
#Plotting functions for interaction model. takes the index of the 'yvarnames' list as an argument
options(scipen = 999)
#input geomcoff
runplot_HM_only<-function(e){
slopeline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$HM)*
(pgls_models_list1[e][[1]]$model$coef[2])
isoline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$HM)*
geomcoefs[e]
pval<-summary(pgls_models_list1[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste('R^2 == ',signif(summary(pgls_models_list1[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
rsq_label <- paste(' R^2 == ', '3')
ggplot(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(HM), y = log(earmeasureval), label = Binomial),
factor = as.factor(waterbirds))+
theme_classic()+
theme(legend.position = "none")+{
#axis.text.x = element_blank(),
#axis.title.x = element_blank())+{
if(hm$scalingtype[e] == "Iso")
geom_point(aes(), size = 2, col = "grey")
else if(hm$scalingtype[e] == "Hypo")
geom_point(aes(), size = 2, col = "blue")
else  if(hm$scalingtype[e] == "Hyper")
geom_point(aes(), size = 2, col = "red")
}  +
scale_color_manual(values=c("green","blue","darkgrey","l2ghtblue","green","darkgray","darkgreen","corns2lk4","blue"))+
geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(HM),y = slopeline), col = "black", size = 2)+
#isometric line
#geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
#          aes(x = log(HM),y = isoline), col = "grey", size = 2)+
ylab(paste0("log(",codes[e],")"))+
#geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
#                         hjust = hjust, vjust = vjust, paste = TRUE))+
annotate(geom = 'text', x = Inf, y = -Inf, label = paste('R^2 == ',signif(summary(pgls_models_list1[[e]])$r.squared,2)), hjust = "inward", vjust = -0.5, parse = TRUE)+
ggtitle(hm$category[e])#+
}
runplot_HM_only(3)
layout_<-"
ABC
DEF
GHI
JKL"
#export multipanel plot
runplot_HM_only(1)+
runplot_HM_only(2)+
runplot_HM_only(3)+
runplot_HM_only(4)+
runplot_HM_only(5)+
runplot_HM_only(6)+
runplot_HM_only(7)+
runplot_HM_only(8)+
runplot_HM_only(9)+
runplot_HM_only(10)+
runplot_HM_only(11)+
runplot_HM_only(12) +plot_annotation(tag_levels = "A")+
plot_layout(design = layout_)
ggsave(file=paste0(choose.dir(),"/scatterheadmass jun 6.svg"),
width=5, height=10)
runplot_HM_only<-function(e){
slopeline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$HM)*
(pgls_models_list1[e][[1]]$model$coef[2])
isoline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$HM)*
geomcoefs[e]
pval<-summary(pgls_models_list1[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste('R^2 == ',signif(summary(pgls_models_list1[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
rsq_label <- paste(' R^2 == ', '3')
ggplot(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(HM), y = log(earmeasureval), label = Binomial),
factor = as.factor(waterbirds))+
theme_classic()+
theme(legend.position = "none")+{
#axis.text.x = element_blank(),
#axis.title.x = element_blank())+{
if(hm$scalingtype[e] == "Iso")
geom_point(aes(), size = 2, col = "grey")
else if(hm$scalingtype[e] == "Hypo")
geom_point(aes(), size = 2, col = "blue")
else  if(hm$scalingtype[e] == "Hyper")
geom_point(aes(), size = 2, col = "red")
}  +
scale_color_manual(values=c("green","blue","darkgrey","l2ghtblue","green","darkgray","darkgreen","corns2lk4","blue"))+
geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(HM),y = slopeline), col = "black", size = 2)+
#isometric line
#geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
#          aes(x = log(HM),y = isoline), col = "grey", size = 2)+
ylab(paste0("log(",codes[e],")"))+
#geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
#                         hjust = hjust, vjust = vjust, paste = TRUE))+
annotate(geom = 'text', x = Inf, y = -Inf, label = paste('R^2 == ',signif(summary(pgls_models_list1[[e]])$r.squared,2)), hjust = "inward", vjust = -0.5, parse = TRUE)+
#ggtitle(hm$category[e])#+
}
runplot_HM_only(3)
layout_<-"
ABC
DEF
GHI
JKL"
#export multipanel plot
runplot_HM_only(1)+
runplot_HM_only(2)+
runplot_HM_only(3)+
runplot_HM_only(4)+
runplot_HM_only(5)+
runplot_HM_only(6)+
runplot_HM_only(7)+
runplot_HM_only(8)+
runplot_HM_only(9)+
runplot_HM_only(10)+
runplot_HM_only(11)+
runplot_HM_only(12) +plot_annotation(tag_levels = "A")+
plot_layout(design = layout_)
runplot_HM_only<-function(e){
slopeline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$HM)*
(pgls_models_list1[e][[1]]$model$coef[2])
isoline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$HM)*
geomcoefs[e]
pval<-summary(pgls_models_list1[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste('R^2 == ',signif(summary(pgls_models_list1[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
rsq_label <- paste(' R^2 == ', '3')
ggplot(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(HM), y = log(earmeasureval), label = Binomial),
factor = as.factor(waterbirds))+
theme_classic()+
theme(legend.position = "none")+{
#axis.text.x = element_blank(),
#axis.title.x = element_blank())+{
if(hm$scalingtype[e] == "Iso")
geom_point(aes(), size = 2, col = "grey")
else if(hm$scalingtype[e] == "Hypo")
geom_point(aes(), size = 2, col = "blue")
else  if(hm$scalingtype[e] == "Hyper")
geom_point(aes(), size = 2, col = "red")
}  +
scale_color_manual(values=c("green","blue","darkgrey","l2ghtblue","green","darkgray","darkgreen","corns2lk4","blue"))+
geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(HM),y = slopeline), col = "black", size = 2)+
#isometric line
#geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
#          aes(x = log(HM),y = isoline), col = "grey", size = 2)+
ylab(paste0("log(",codes[e],")"))+
#geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
#                         hjust = hjust, vjust = vjust, paste = TRUE))+
annotate(geom = 'text', x = Inf, y = -Inf, label = paste('R^2 == ',signif(summary(pgls_models_list1[[e]])$r.squared,2)), hjust = "inward", vjust = -0.5, parse = TRUE)+
#ggtitle(hm$category[e])#+
}
runplot_HM_only(3)
runplot_HM_only<-function(e){
slopeline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$HM)*
(pgls_models_list1[e][[1]]$model$coef[2])
isoline<-pgls_models_list1[e][[1]]$model$coef[1]+
log(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e])$HM)*
geomcoefs[e]
pval<-summary(pgls_models_list1[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(" ",paste('R^2 == ',signif(summary(pgls_models_list1[[e]])$r.squared,2))),
hjust = c(-0.1,-0.5),
vjust = c(-0.5,-0.5)
)
rsq_label <- paste(' R^2 == ', '3')
ggplot(subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(HM), y = log(earmeasureval), label = Binomial),
factor = as.factor(waterbirds))+
theme_classic()+
theme(legend.position = "none")+{
#axis.text.x = element_blank(),
#axis.title.x = element_blank())+{
if(hm$scalingtype[e] == "Iso")
geom_point(aes(), size = 2, col = "grey")
else if(hm$scalingtype[e] == "Hypo")
geom_point(aes(), size = 2, col = "blue")
else  if(hm$scalingtype[e] == "Hyper")
geom_point(aes(), size = 2, col = "red")
}  +
scale_color_manual(values=c("green","blue","darkgrey","l2ghtblue","green","darkgray","darkgreen","corns2lk4","blue"))+
geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
aes(x = log(HM),y = slopeline), col = "black", size = 2)+
#isometric line
#geom_line(data = subset(longdfplotting,longdfplotting$earmeasures==yvarnames[e]),
#          aes(x = log(HM),y = isoline), col = "grey", size = 2)+
ylab(paste0("log(",codes[e],")"))+
#geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
#                         hjust = hjust, vjust = vjust, paste = TRUE))+
annotate(geom = 'text', x = Inf, y = -Inf,
label = paste('R^2 == ',signif(summary(pgls_models_list1[[e]])$r.squared,2)), hjust = "inward", vjust = -0.5, parse = TRUE)
#ggtitle(hm$category[e])#+
}
runplot_HM_only(3)
layout_<-"
ABC
DEF
GHI
JKL"
#export multipanel plot
runplot_HM_only(1)+
runplot_HM_only(2)+
runplot_HM_only(3)+
runplot_HM_only(4)+
runplot_HM_only(5)+
runplot_HM_only(6)+
runplot_HM_only(7)+
runplot_HM_only(8)+
runplot_HM_only(9)+
runplot_HM_only(10)+
runplot_HM_only(11)+
runplot_HM_only(12) +plot_annotation(tag_levels = "A")+
plot_layout(design = layout_)
ggsave(file=paste0(choose.dir(),"/scatterheadmass jun 6.svg"),
width=5, height=10)
ggsave(file=paste0(choose.dir(),"/scatterheadmass jun 6.svg"),
width=6, height=10)
