#Next get averages by species for columns with continuous data
avgdf<-df %>% group_by(Binomial) %>%
summarise_at(vars(Skull.width..mm.:TM_FP),mean, na.rm = TRUE)
avgdf<-as.data.frame(avgdf)
#Columns from the distinctdf dataframe which don't require averaging are added back
avgdf$Species<-distinctdforder$Species
avgdf$Low.Hz<-distinctdforder$Low.Hz
avgdf$Order<-distinctdforder$Order
avgdf$Family<-distinctdforder$Family
avgdf$Category<-as.character(distinctdforder$Category)
avgdf$birdtree<-gsub(" ","_",distinctdforder$Birdtree)
avgdf$BM_lit<-distinctdforder$BM_lit
avgdf$aud_spp<-distinctdforder$spp_audio
avgdf$aud_rel<-distinctdforder$audio_relation
avgdf$aud_spp<-distinctdforder$spp_audio
#make comparative data frame object
birdCDO<-comparative.data(phy = birdtreels,data = avgdf,#[avgdf$Category!="Terrestrial",]
names.col = Binomial,
vcv = TRUE, na.omit = FALSE,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
######If doing audiogram analyses now proceed to
######'Audiograms linked to anatomy.R'
######Otherwise, proceed to do scaling between structures and with head mass
library(ggrepel)
library(ggplot2)
library(ggpubr)
library(flextable)
library(officer)
library(dplyr)
####create averaged values for instances where multiple species match a congener with audiogram####
# add avg Corvus and Phalacrocorax values----------------------------------------
phalacrocoraxavg<-avgdf[grepl('Phalacrocorax', avgdf$Binomial), ] %>%
dplyr::select(where(is.numeric)) %>%
summarise_all(mean, na.rm=T)
corvusavg<-avgdf[grepl('Corvus', avgdf$Binomial), ] %>%
dplyr::select(where(is.numeric)) %>%
summarise_all(mean, na.rm=T)
names(corvusavg)
cong_avg<-dplyr::bind_rows(avgdf,corvusavg,phalacrocoraxavg)
cong_avg$Binomial[128]<-"Corvus_cornix"
cong_avg$Binomial[129]<-"Phalacrocorax_carbo"
cong_avg<-cong_avg[-c(grep('Corvus_albus|Corvus_splendens', cong_avg$Binomial)), ]
cong_avg<-cong_avg[-c(grep('Phalacrocorax_capensis|Phalacrocorax_lucidus|Phalacrocorax_neglectus', cong_avg$Binomial)), ]
avgdf<-cong_avg
avgdf$aud_spp<-distinctdforder$spp_audio
# load audiograms ---------------------------------------------------------
fig1<-read.csv(paste0(getwd(),"/audiograms.csv"), stringsAsFactors = FALSE)
#check how many reach cutoff
#species not reaching lower Hz limit:
minsubset<-fig1 %>% group_by(Species) %>% filter(Hz == min(Hz))
minsubset$reachcutoff<-ifelse(minsubset$Threshold <35, "under35","over35")
table(minsubset$reachcutoff)#count number
minsubset$Species[minsubset$reachcutoff=="under35"]
#species not reaching upper Hz limit
maxsubset<-fig1 %>% group_by(Species) %>% filter(Hz == max(Hz))
maxsubset$reachcutoff<-ifelse(maxsubset$Threshold <35, "under35","over35")
table(maxsubset$reachcutoff)#count number
maxsubset$Species[maxsubset$reachcutoff=="under35"]
# get the high and low Hz limits from a cutoff level ----------------------
splt<-split(fig1,fig1$Species)
#set cutoff for the high and low Hz limits (35 dB)
cutoff<-35
#create new matrix to populate with data and convert to data audiogramram
limits<-matrix(nrow=length(splt),ncol = 7)
for(i in seq_along(splt)){
audiogram<-data.frame()#
df_audiogram<-as.data.frame(approx(splt[[i]]$Hz,splt[[i]]$Threshold,n = 5000))#approx function to interpolate audiogram
df_audiogram
#df_audiogram$y is sound level (dB)
#df_audiogram$x is frequency (Hz)
besthz<-df_audiogram$x[df_audiogram$y==min(df_audiogram$y)]
bestsensitivity<-df_audiogram$y[df_audiogram$y==min(df_audiogram$y)]
#calcualte low Hz limit
if(nrow(df_audiogram[df_audiogram$y>cutoff & df_audiogram$x <besthz,])==0){#if the audiogram does not go above cutoff value, get minimum frequency tested
lowlimit<-min(df_audiogram$x)
}
else{
lowflank<-df_audiogram[df_audiogram$y>cutoff & df_audiogram$x <besthz,]#get frequency where audiogram crosses cutoff value
lowlimit<-max(lowflank$x)#lowhz limit
}
#calculate high Hz limit
if(nrow(df_audiogram[df_audiogram$y>cutoff & df_audiogram$x >besthz,])==0){# #if the audiogram does not go above cutoff value, get max frequency tested
highlimit<-max(df_audiogram$x)
}
else{
highflank<-df_audiogram[df_audiogram$y>35 & df_audiogram$x >besthz,]#get frequency where audiogram crosses cutoff value
highlimit<-min(highflank$x)#High hz limit
}
limits[i,1]<-lowlimit
limits[i,2]<-highlimit
limits[i,3]<-splt[[i]]$Species[1]
limits[i,4]<-splt[[i]]$group[1]
limits[i,5]<-splt[[i]]$Hz[1]
limits[i,6]<-besthz
limits[i,7]<-bestsensitivity
}
#View(limits)
#convert to dataframe and give column names
limits<-as.data.frame(limits)
colnames(limits)<-c("LowHzlimit","HighHzlimit","Species","supraorder","Hz", "besthz","bestsensitivity")
limits[,1]<-as.numeric(as.character(limits$LowHzlimit))
limits[,2]<-as.numeric(as.character(limits$HighHzlimit))
limits$Hz<-as.numeric(as.character(limits$Hz))
limits$besthz<-as.numeric(as.character(limits$besthz))
limits$bestsensitivity<-as.numeric(as.character(limits$bestsensitivity))
###################add species from scan data that correspond with audiograms###############
limits$binomial<-NA
limits$binomial[limits$Species=="Barn owl"]<-"Tyto_alba"
limits$binomial[limits$Species=="American kestrel"]<-"Falco_rupicolus" #
limits$binomial[limits$Species=="Budgerigar"]<-"Melopsittacus_undulatus"
limits$binomial[limits$Species=="Canary"]<-"Serinus_canaria"
limits$binomial[limits$Species=="Chicken"]<-"Gallus_domesticus"
limits$binomial[limits$Species=="Cockatiel"]<-"Nymphicus_hollandicus"
limits$binomial[limits$Species=="Eurasian eagle owl"]<-"Bubo_africanus"
limits$binomial[limits$Species=="Eurasian sparrowhawk"]<-"Accipiter_melanoleucus"
limits$binomial[limits$Species=="Great cormorant"]<-"Phalacrocorax_carbo"
limits$binomial[limits$Species=="Hooded crow"]<-"Corvus_cornix"
limits$binomial[limits$Species=="Indian peafowl"]<-"Pavo_muticus"
limits$binomial[limits$Species=="Mallard duck"]<-"Anas_georgica_georgica"
limits$binomial[limits$Species=="Rock dove"]<-"Columba_livia"#
limits$binomial[limits$Species=="Zebra finch"]<-"Taeniopygia_guttata"
##################add anatomical data from anatomy df############
limits$TM<-avgdf$TM[match(limits$binomial,avgdf$Binomial)]
limits$RW<-avgdf$RW[match(limits$binomial,avgdf$Binomial)]
limits$FP<-avgdf$FP[match(limits$binomial,avgdf$Binomial)]
limits$Air<-avgdf$Air[match(limits$binomial,avgdf$Binomial)]
limits$TM<-avgdf$TM[match(limits$binomial,avgdf$Binomial)]
limits$HM<-avgdf$HM[match(limits$binomial,avgdf$Binomial)]
limits$BM<-avgdf$BM_lit[match(limits$binomial,avgdf$Binomial)]
limits$ES<-avgdf$ES[match(limits$binomial,avgdf$Binomial)]
limits$TM_FP<-avgdf$TM_FP[match(limits$binomial,avgdf$Binomial)]
limits$TMA<-avgdf$TMA[match(limits$binomial,avgdf$Binomial)]
limits$COffset<-avgdf$COffset[match(limits$binomial,avgdf$Binomial)]
limits$ECD<-avgdf$ECD[match(limits$binomial,avgdf$Binomial)]
limits$CL<-avgdf$CL[match(limits$binomial,avgdf$Binomial)]
limits$CV<-avgdf$CV[match(limits$binomial,avgdf$Binomial)]
limits$UH<-avgdf$UH[match(limits$binomial,avgdf$Binomial)]
limits$spp_aud<-avgdf$aud_spp[match(limits$binomial,avgdf$Binomial)]
limits$aud_rel<-avgdf$aud_rel[match(limits$binomial,avgdf$Binomial)]
#classification for the two species withaverage
limits$aud_rel[limits$binomial=="Corvus_cornix"]<-"Congener"
limits$spp_aud[limits$binomial=="Corvus_cornix"]<-"Corvus_cornix"
limits$aud_rel[limits$binomial=="Phalacrocorax_carbo"]<-"Congener"
limits$spp_aud[limits$binomial=="Phalacrocorax_carbo"]<-"Phalacrocorax_carbo"
########The audiogram metrics have now been computed.
########the 'pgls_resid re headmass.R' file can now be used to run the pgls modesl###
########below the models are run without adjusting for head size####
library(patchwork)
library(ggrepel)
#ensure phylogeny matches dataframe
#remake comparative data frame object with averaged congeners
#rename phylogeny tips to matching with the species for which audiogram is available
birdtreels$tip.label[14]<-"Corvus_cornix" #renamed from Corvus_albus
birdtreels$tip.label[51]<-"Phalacrocorax_carbo" #rename "phalacrocorax_lucidus"
birdCDO<-comparative.data(phy = birdtreels,data = avgdf,#[avgdf$Category!="Terrestrial",]
names.col = Binomial,
vcv = TRUE, na.omit = FALSE,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
############RUN PGLS############
####scaling vs head mass########
####list of pgls models to run (only models with head mass are used)####
pgls_todo_hm<- c("log(TM_FP)~log(HM)",
"log(COffset)~log(HM)",
"log(UH)~log(HM)",
"log(TMA)~log(HM)",
"log(ECD)~log(HM)",
"log(TM)~log(HM)",#
"log(FP)~log(HM)",#
"log(RW)~log(HM)",
"log(ES)~log(HM)",
"log(Air)~log(HM)",#
"log(CL)~log(HM)",
"log(CV)~log(HM)")
####list of expected geometric coefficients for___###
geomcoefs<-c(0,#impedance-matching
0.33,
0.33,
0,
0.33,#auditory endorgan
0.67,#input/output areas
0.67,
0.67,
0.33,#stiffness
1,
0.33,#columella size
1)
#######functional category list#######
categorylist<-c(rep("Impedance matching",4),
"Auditory endorgan length",
rep("Input/output areas",3),
rep("Stiffness",2),
rep("Columella size",2))
#creates list of model outputs 'pgls_model_list'
#dataframe with results 'hm'
source("pgls_HM.R")
# list of models predicted by hm are in an object 'pgls_model_list'
pgls_models_list
#list of the original regressions here:
pgls_todo_hm
#########get residuals of a pgls of measure~head mass as a dataframe#####
getresids_as_df<-function(i){
residtest<-as.data.frame(residuals(pgls_models_list[[i]]))
residtest$resid_bname<-row.names(residtest)
resid_measure<-function(){
paste0("resid_",pgls_todo_hm[i])
}
residtest<-setNames(residtest,c(resid_measure(),"resid_bname"))
}
#############create list of dataframes containing residuals##############
resids_df_list<-list()
for(i in seq_along(pgls_todo_hm)){
resids_df_list[[i]]<-assign("toadd",getresids_as_df(i))
}
#for(i in seq_along(resids_df_list)){
#limit2<-limits
#limit2<-full_join(limits,resids_df_list[[i]],by = c("spp_aud" = "resid_bname"))
#
#}
#join residual data into single dataframe
joined<-limits %>% full_join(.,resids_df_list[[1]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[2]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[3]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[4]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[5]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[6]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[7]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[8]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[9]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[10]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[11]],by = c("spp_aud" = "resid_bname"))%>%
full_join(.,resids_df_list[[12]],by = c("spp_aud" = "resid_bname"))
#only keep audiogram species
joined<-joined[which(!is.na(joined$aud_rel)),]
names(joined)
#remove tilda from names to not mess up pgls formulas based on names
joined<-joined %>% rename_with(~ gsub("~", "vs", .x, fixed = TRUE))
residlist<-gsub("[()]","_",names(joined)[25:36])
joined<-setNames(joined,c(names(joined)[1:24],residlist))
names(joined)
birdCDO<-comparative.data(phy = birdtreels,data = joined,#[avgdf$Category!="Terrestrial",]
names.col =binomial,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
############get model list#########3
modellist_bs<-paste0("bestsensitivity~",residlist)
modellist_lf<-paste0("log(LowHzlimit)~",residlist)
modellist_hf<-paste0("log(HighHzlimit)~",residlist)
modellist_bh<-paste0("log(besthz)~",residlist)
residlist
#note same object name for category list but different order relative to non-resid pgls
categorylist_lf<-c("Impedance match",
"Impedance match",
"Impedance match",
"Impedance match",
"Auditory endorgan length",
"Input/output areas",
"Input/output areas",
"Input/output areas",
"Stiffness",
"Stiffness",
"Columella size",
"Columella size")
categorylist_bs<-categorylist_lf
categorylist_bh<-categorylist_lf
categorylist_hf<-categorylist_lf
pgls_models(modellist_bs[[1]])
categorylist_bs
modellist_bs
source("pgls_audiogram_bs.R")
source("pgls_audiogram_bs.R")
source("pgls_audiogram_bs.R")
source("pgls_audiogram_bs.R")
source("pgls_audiogram_lf.R")
source("pgls_audiogram_hf.R")
source("pgls_audiogram_bh.R")
source("pgls_audiogram_bs.R")
audio_pgls_results<-bind_rows(audiogrampgls_bh,
audiogrampgls_bs,
audiogrampgls_lf,
audiogrampgls_hf)
audio_pgls_results$CI95_low<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate+audio_pgls_results$`Std. Error`*1.96
#############formatting table###############
#combine estimate +/- 95 CI into one cell
audio_pgls_results$pglsslope<-paste0(audio_pgls_results$Estimate," (",
format(round(audio_pgls_results$CI95_low, 3), nsmall = 3),
",",
format(round(audio_pgls_results$CI95_high, 3), nsmall = 3),
")")
#split up model column
spltmodel<-strsplit(audio_pgls_results$Model,"~")
audio_pgls_results$`Audiogram metric`<-unlist(lapply(spltmodel, `[[`, 1))
audio_pgls_results$anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
#only keep significant relationships
audio_pgls_results<-audio_pgls_results %>%
select(`Audiogram metric`,
category,
Coefficients,
pglsslope,
Adj_Rsquared,
P.val,
Lambda)%>%
filter(Coefficients!="(Intercept)" &
P.val <0.05)
#arrange by audiogram metric, category, and R2
audio_pgls_results <-audio_pgls_results %>%
arrange(factor(audio_pgls_results$`Audiogram metric`),
factor(category,levels = c("Impedance match",
"Stiffness",
"Input/output areas",
"Auditory endorgan length",
"Columella size")),
desc(Adj_Rsquared))
# remove the "log" from 'Coefficients'
#audio_pgls_results$xmodel_nolog<-numeric()
for(i in seq_along(audio_pgls_results$Coefficients)){
audio_pgls_results$Coefficients[i]<-gsub("[\\(\\)]", "", regmatches(audio_pgls_results$Coefficients, gregexpr("\\(.*?\\)", audio_pgls_results$Coefficients))[[i]])
}
#visualize the table better using the flextable package
flexall<-flextable(audio_pgls_results) %>% add_header_lines(
values = "Table X. ") %>%
#bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
library(patchwork)
library(dplyr)
########SETUP############
#limits<- limits %>% rename(., `Best Sensitivity\n (dB)` = bestsensitivity)
modellist_bs
modellist_lf
modellist_bh
modellist_hf
#include the significant relationship with head mass
#modellist_bh<-append(modellist, "log(besthz)~(HM)")
### combine results from regressions for each measure into a single datagrame
audio_pgls_results<-bind_rows(audiogrampgls_bh,
audiogrampgls_bs,
audiogrampgls_lf,
audiogrampgls_hf)
audio_pgls_results$CI95_low<-audio_pgls_results$Estimate-audio_pgls_results$`Std. Error`*1.96
audio_pgls_results$CI95_high<-audio_pgls_results$Estimate+audio_pgls_results$`Std. Error`*1.96
#combine estimate +/- 95 CI into one cell
audio_pgls_results$pglsslope<-paste0(audio_pgls_results$Estimate," (",
format(round(audio_pgls_results$CI95_low, 3), nsmall = 3),
",",
format(round(audio_pgls_results$CI95_high, 3), nsmall = 3),
")")
#split up model column
spltmodel<-strsplit(audio_pgls_results$Model,"~")
#spltmodel<-gsub('bestsensitivity', 'Best Sensitivity (dB)',spltmodel)
audio_pgls_results$`Audiogram metric`<-unlist(lapply(spltmodel, `[[`, 1))
audio_pgls_results$anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
#arrange by audiogram metric, category, and R2
audio_pgls_results <-audio_pgls_results %>%
arrange(factor(audio_pgls_results$`Audiogram metric`),
factor(category,levels = c("Impedance match",
"Stiffness",
"Input/output areas",
"Auditory endorgan length",
"Columella size")),
desc(Adj_Rsquared))
#split up model column
#spltmodel<-strsplit(audio_pgls_results$Model,"~")
#audio_pgls_results$`Audiogram metric`<-unlist(lapply(spltmodel, `[[`, 1))
#audio_pgls_results$anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
#
##only keep significant relationships
audio_pgls_results<-audio_pgls_results %>%
filter(Coefficients!="(Intercept)" &
P.val <0.05)
#get model list from the results table (only significant results)
modellist_sig<-paste0(audio_pgls_results$`Audiogram metric`,"~",
audio_pgls_results$Coefficients)
pgls_models_sig<-lapply(modellist_sig,pgls_models)#run pgls
#split up model column
spltmodel<-strsplit(modellist_sig,"~")
traity<-unlist(lapply(spltmodel, `[[`, 1))
anattraitx<-unlist(lapply(spltmodel, `[[`, 2))
# remove variable from within log
anattrait_simple<-numeric()
for(i in seq_along(anattraitx)){
anattrait_simple[i]<-gsub("[\\(\\)]", "", regmatches(anattraitx, gregexpr("\\(.*?\\)", anattraitx))[[i]])
}
#only keep significant relationships
#audio_pgls_plt<-audio_pgls_plt %>% select(Model, Coefficients, P.val)%>%
# filter(Coefficients!="(Intercept)" &
#          P.val <0.05)
#log transform anatomy data for the slope line
#logged<-limits%>% mutate_at(vars(TM:UH),log)
##########best Hz##############
for(i in seq_along(anattraitx)){
assign(paste0("slpline","_",as.character(i)),
pgls_models_sig[i][[1]]$model$coef[1]+
joined[,anattraitx[i]]*pgls_models_sig[i][[1]]$model$coef[2])
}
anattraitx2<-gsub("resid_log_", "Resid. ", anattraitx)
anattraitx3<-gsub("_vslog_HM_", "",anattraitx2)
runplot_audio<-function(e){
p<-ggplot(joined,
aes_string(x = spltmodel[[e]][2], y = spltmodel[[e]][1]))+
theme_classic()+
#theme(legend.position = "none")+
#      axis.text.y = element_blank(),
#      axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)+
geom_line(aes_string(x = anattraitx[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)+
xlab(anattraitx3[e])+{
if(e<11)
ylab("Best Sensitivity\n (dB)")
#else if(e >10 & e < 13)
#  ylab("Best Frequency\n (Hz)")
else if(e >10 & e < 21)
ylab("High Frequency\n Limit (Hz)")
else if(e > 20)
ylab("Low Frequency\n Limit (Hz)")
}
p
}
runplot_audio(1)
design<-"
ABCDE
FGHIJ
KLMNO
PQRST
U####
V####"
xs = c(log(min(limits$HM, na.rm = T)), log(max(limits$HM, na.rm = T)))
beta = c(8.4, -0.26)
ys = cbind(1, xs) %*% beta
hmplot<-ggplot(limits,aes(x = log(HM), y = log(besthz)))+
theme_classic()+
geom_point(aes_string(shape="aud_rel"), size = 2)+
#geom_abline(intercept = 8.4, slope = -0.26,
#         col = "black", size = 2, fullrange = T)
geom_segment(x = log(min(limits$HM, na.rm = T)), xend = log(max(limits$HM, na.rm = T)),
y = ys[1],
yend = ys[2], size = 2)+
ylab("Best Frequency\n(Hz)")
#slope = -0.26, intercept = 8.4
hmplot
#PLOT ALL BEST FREQUENCY
runplot_audio(1)+
runplot_audio(2)+
runplot_audio(3)+
runplot_audio(4)+
runplot_audio(5)+
runplot_audio(6)+
runplot_audio(7)+
runplot_audio(8)+
runplot_audio(9)+
runplot_audio(10)+
runplot_audio(11)+
runplot_audio(12)+
runplot_audio(13)+
runplot_audio(14)+
runplot_audio(15)+
runplot_audio(16)+
runplot_audio(17)+
runplot_audio(18)+
runplot_audio(19)+
runplot_audio(20)+
runplot_audio(21)+
hmplot+
plot_annotation(tag_levels = list(c(
"A","","","","",
"","","","","",
"B","","","","",
"","","","","",
"C","D","","","",
"D","","","","")))+
plot_layout(design = design, guides = "collect")
ggsave(file=paste0(choose.dir(),"/audiogramscatter_supp_RESID jun 17.svg"), width=10, height=10)
#PLOT ALL BEST FREQUENCY
runplot_audio(1)+
runplot_audio(2)+
runplot_audio(3)+
runplot_audio(4)+
runplot_audio(5)+
runplot_audio(6)+
runplot_audio(7)+
runplot_audio(8)+
runplot_audio(9)+
runplot_audio(10)+
runplot_audio(11)+
runplot_audio(12)+
runplot_audio(13)+
runplot_audio(14)+
runplot_audio(15)+
runplot_audio(16)+
runplot_audio(17)+
runplot_audio(18)+
runplot_audio(19)+
runplot_audio(20)+
runplot_audio(21)+
hmplot+
plot_annotation(tag_levels = list(c(
"A","","","","",
"","","","","",
"B","","","","",
"","","","","",
"C","D","","","",
"D","","","","")))+
plot_layout(design = design, guides = "collect")
ggsave(file=paste0(choose.dir(),"/audiogramscatter_supp_RESID jun 17.svg"), width=10, height=10)
