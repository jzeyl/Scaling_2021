e<-1
ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(besthz)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel")
, size = 2)
vectx_modellist_lf[e]
View(limits)
log(limits$Air)
log(limitsanat$Air)
plot(log(limits$Air)~limits$bestsensitivity)
plot(log(limits$Air),limits$bestsensitivity)
ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(besthz)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)
ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(besthz)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)
plot(log(limits$Air),limits$bestsensitivity)
plot(log(limits$Air),limits$besthz)
ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(besthz)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)
plot(log(limits$Air),limits$besthz)
ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(besthz)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)
vecty_modellist_bh
ggplot(limits, aes(x = log(Air), y = log(bestHz)))+geom_point()
ggplot(limits, aes(x = log(Air), y = log(besthz)))+geom_point()
ggplot(limits, aes(x = log(FP), y = log(bestHz)))+geom_point()
ggplot(limits, aes(x = log(FP), y = log(besthz)))+geom_point()
ggplot(limits, aes(x = log(RW), y = log(besthz)))+geom_point()
vectx_modellist_lf[e]
vectx_modellist_lf[1]
View(okselect)
vectxsimple_lf
slpline_1
ggplot(limits,aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()
ggplot(limits,aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()+
geom_point()
runplotpgls_aud_bh<-function(e){
pval<-summary(pgls_models_list_bh[[e]])$coefficients[,4][[2]]
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(besthz)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)+{
if (pval<0.05)  geom_point(aes_string(shape="aud_rel"), size = 2, col = "black")
else geom_point(aes_string(shape="aud_rel"), size = 2, col = "black", alpha = 0.4)
} + {
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
#geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
#                         hjust = hjust, vjust = vjust))+
scale_shape_manual(values=c(17, 16))+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' R^2 == ',signif(summary(pgls_models_list_bh[[e]])$r.squared,2)), hjust = "inward", vjust = "inward", parse = TRUE)+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' P == ',signif(summary(pgls_models_list_bh[[e]])$coefficients[,4][[2]],2)), hjust = "inward", vjust = -2, parse = TRUE)
ggtitle(categorylist_aud[e])
p
}
runplotpgls_aud_bh(10)
for(i in seq_along(vectxsimple_lf)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_bh[i][[1]]$model$coef[1]+
ok[,vectxsimple_lf[i]]*pgls_models_list_bh[i][[1]]$model$coef[2])
}
runplotpgls_aud_bh<-function(e){
pval<-summary(pgls_models_list_bh[[e]])$coefficients[,4][[2]]
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(besthz)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)+{
if (pval<0.05)  geom_point(aes_string(shape="aud_rel"), size = 2, col = "black")
else geom_point(aes_string(shape="aud_rel"), size = 2, col = "black", alpha = 0.4)
} + {
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
#geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
#                         hjust = hjust, vjust = vjust))+
scale_shape_manual(values=c(17, 16))+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' R^2 == ',signif(summary(pgls_models_list_bh[[e]])$r.squared,2)), hjust = "inward", vjust = "inward", parse = TRUE)+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' P == ',signif(summary(pgls_models_list_bh[[e]])$coefficients[,4][[2]],2)), hjust = "inward", vjust = -2, parse = TRUE)
ggtitle(categorylist_aud[e])
p
}
runplotpgls_aud_bh(10)
ggplot(limits,aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()+
geom_point()
names(limits)
ggplot(limits,aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()+
geom_point()+
geom_text(label=binomial)
ggplot(limits,aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()+
geom_point()+
geom_text(aes(label=binomial))
ggplot(limits,aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()+
geom_point()+
geom_text(aes(label=binomial), angle = 30)
runplotpgls_aud_bh(10)+  geom_text(aes(label=binomial), angle = 30)
ggplot(limits,
aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)
ggplot(limits,aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()+
geom_point()
ggplot(limits,
aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()
ggplot(limits,
aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()
ggplot(limits,
aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()+
geom_point(aes_string(shape="aud_rel"), size = 2)
ggplot(limits,
aes_string(x = vectx_modellist_lf[10], y = "log(besthz)"))+
theme_classic()+
geom_point(aes_string(), size = 2)
str(limits$aud_rel)
which(is.na(limits$aud_rel))
limits$binomial[which(is.na(limits$aud_rel))]
limits$binomial[limits$binomial=="Corvus_cornix|Phalacrocorax_carbo"]
limits$binomial[which(is.na(limits$aud_rel))]
limits$binomial[limits$binomial=="Corvus_cornix|Phalacrocorax_carbo"]
limits[limits$binomial=="Corvus_cornix|Phalacrocorax_carbo"]
limits[limits$binomial=="Corvus_cornix|Phalacrocorax_carbo",]
limits[limits$binomial=="Corvus_cornix",]
limits$aud_rel[limits$binomial=="Corvus_cornix]
]
limits$aud_rel[limits$binomial=="Corvus_cornix"]
limits$binomial
limits$aud_rel[limits$binomial=="Corvus_cornix"]
limits$aud_rel[limits$binomial=="Corvus_cornix"]<-"Congener"
limits$aud_rel[limits$binomial=="Corvus_cornix"]
View(limits)
limits$aud_rel[limits$binomial=="Phalacrocorax_carbo"]<-"Congener"
for(i in seq_along(vectxsimple_lf)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_bh[i][[1]]$model$coef[1]+
ok[,vectxsimple_lf[i]]*pgls_models_list_bh[i][[1]]$model$coef[2])
}
runplotpgls_aud_bh<-function(e){
pval<-summary(pgls_models_list_bh[[e]])$coefficients[,4][[2]]
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(besthz)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)+{
if (pval<0.05)  geom_point(aes_string(shape="aud_rel"), size = 2, col = "black")
else geom_point(aes_string(shape="aud_rel"), size = 2, col = "black", alpha = 0.4)
} + {
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
#geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
#                         hjust = hjust, vjust = vjust))+
#scale_shape_manual(values=c(17, 16))+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' R^2 == ',signif(summary(pgls_models_list_bh[[e]])$r.squared,2)), hjust = "inward", vjust = "inward", parse = TRUE)+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' P == ',signif(summary(pgls_models_list_bh[[e]])$coefficients[,4][[2]],2)), hjust = "inward", vjust = -2, parse = TRUE)
ggtitle(categorylist_aud[e])
p
}
runplotpgls_aud_bh(10)+  geom_text(aes(label=binomial), angle = 30)
#PLOT ALL BEST FREQUENCY
runplotpgls_aud_bh(1)+
runplotpgls_aud_bh(2)+
runplotpgls_aud_bh(3)+
runplotpgls_aud_bh(4)+
runplotpgls_aud_bh(5)+
runplotpgls_aud_bh(6)+
runplotpgls_aud_bh(7)+
runplotpgls_aud_bh(8)+
runplotpgls_aud_bh(9)+
runplotpgls_aud_bh(10)+
runplotpgls_aud_bh(11)+
runplotpgls_aud_bh(12)+
runplotpgls_aud_bh(13)+
runplotpgls_aud_bh(14)+plot_annotation(tag_levels = "A")
for(i in seq_along(vectxsimple_lf)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_bh[i][[1]]$model$coef[1]+
ok[,vectxsimple_lf[i]]*pgls_models_list_bh[i][[1]]$model$coef[2])
}
runplotpgls_aud_bh<-function(e){
pval<-summary(pgls_models_list_bh[[e]])$coefficients[,4][[2]]
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(besthz)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+
geom_point(aes_string(shape="aud_rel"), size = 2)+{
if (pval<0.05)  geom_point(aes_string(shape="aud_rel"), size = 2, col = "black")
else geom_point(aes_string(shape="aud_rel"), size = 2, col = "black", alpha = 0.4)
} + {
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
#geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
#                         hjust = hjust, vjust = vjust))+
#scale_shape_manual(values=c(17, 16))+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' R^2 == ',signif(summary(pgls_models_list_bh[[e]])$r.squared,2)), hjust = -0.05, vjust = -0.1, parse = TRUE)+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' P == ',signif(summary(pgls_models_list_bh[[e]])$coefficients[,4][[2]],2)), hjust = -0.05, vjust = -2.1, parse = TRUE)
ggtitle(categorylist_aud[e])
p
}
runplotpgls_aud_bh(10)+  geom_text(aes(label=binomial), angle = 30)
#PLOT ALL BEST FREQUENCY
runplotpgls_aud_bh(1)+
runplotpgls_aud_bh(2)+
runplotpgls_aud_bh(3)+
runplotpgls_aud_bh(4)+
runplotpgls_aud_bh(5)+
runplotpgls_aud_bh(6)+
runplotpgls_aud_bh(7)+
runplotpgls_aud_bh(8)+
runplotpgls_aud_bh(9)+
runplotpgls_aud_bh(10)+
runplotpgls_aud_bh(11)+
runplotpgls_aud_bh(12)+
runplotpgls_aud_bh(13)+
runplotpgls_aud_bh(14)+plot_annotation(tag_levels = "A")
runplotpgls_aud_bs<-function(e){
pval<-summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(paste0("P = ",
signif(summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]],2),
",",
" R2 = ",signif(summary(pgls_models_list_bs[[e]])$r.squared,2))
,""),
hjust = c(-0.1,-0),
vjust = c(-1,-0)
)
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "bestsensitivity"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+{
if (pval<0.05)  geom_point(aes_string(shape="aud_rel"), size = 2, col = "black")
else geom_point(aes_string(shape="aud_rel"), size = 2, col = "black", alpha = 0.4)
} + {
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
scale_shape_manual(values=c(17, 16))+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' R^2 == ',signif(summary(pgls_models_list_bs[[e]])$r.squared,2)), hjust = -0.05, vjust = -0.1, parse = TRUE)+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' P == ',signif(summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]],2)), hjust = -0.05, vjust = -2.1, parse = TRUE)
ggtitle(categorylist_aud[e])
p
}
runplotpgls_aud_bs(1)
runplotpgls_aud_bs(1)+
runplotpgls_aud_bs(2)+
runplotpgls_aud_bs(3)+
runplotpgls_aud_bs(4)+
runplotpgls_aud_bs(5)+
runplotpgls_aud_bs(6)+
runplotpgls_aud_bs(7)+
runplotpgls_aud_bs(8)+
runplotpgls_aud_bs(9)+
runplotpgls_aud_bs(10)+
runplotpgls_aud_bs(11)+
runplotpgls_aud_bs(12)+
runplotpgls_aud_bs(13)+
runplotpgls_aud_bs(14)+plot_annotation(tag_levels = "A")
for(i in seq_along(vectxsimple_lf)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_bs[i][[1]]$model$coef[1]+
ok[,vectxsimple_lf[i]]*pgls_models_list_bs[i][[1]]$model$coef[2])
}
runplotpgls_aud_bs<-function(e){
pval<-summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(paste0("P = ",
signif(summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]],2),
",",
" R2 = ",signif(summary(pgls_models_list_bs[[e]])$r.squared,2))
,""),
hjust = c(-0.1,-0),
vjust = c(-1,-0)
)
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "bestsensitivity"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+{
if (pval<0.05)  geom_point(aes_string(shape="aud_rel"), size = 2, col = "black")
else geom_point(aes_string(shape="aud_rel"), size = 2, col = "black", alpha = 0.4)
} + {
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
scale_shape_manual(values=c(17, 16))+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' R^2 == ',signif(summary(pgls_models_list_bs[[e]])$r.squared,2)), hjust = -0.05, vjust = -0.1, parse = TRUE)+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' P == ',signif(summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]],2)), hjust = -0.05, vjust = -2.1, parse = TRUE)
ggtitle(categorylist_aud[e])
p
}
runplotpgls_aud_bs(1)
runplotpgls_aud_bs(1)+
runplotpgls_aud_bs(2)+
runplotpgls_aud_bs(3)+
runplotpgls_aud_bs(4)+
runplotpgls_aud_bs(5)+
runplotpgls_aud_bs(6)+
runplotpgls_aud_bs(7)+
runplotpgls_aud_bs(8)+
runplotpgls_aud_bs(9)+
runplotpgls_aud_bs(10)+
runplotpgls_aud_bs(11)+
runplotpgls_aud_bs(12)+
runplotpgls_aud_bs(13)+
runplotpgls_aud_bs(14)+plot_annotation(tag_levels = "A")
for(i in seq_along(vectxsimple_lf)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_lf[i][[1]]$model$coef[1]+
ok[,vectxsimple_lf[i]]*pgls_models_list_lf[i][[1]]$model$coef[2])
}
runplotpgls_aud_lf<-function(e){
pval<-summary(pgls_models_list_lf[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(paste0("P = ",
signif(summary(pgls_models_list_lf[[e]])$coefficients[,4][[2]],2),
",",
" R2 = ",signif(summary(pgls_models_list_lf[[e]])$r.squared,2))
,""),
hjust = c(-0.1,-0),
vjust = c(-1,-0)
)
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(LowHzlimit)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+{
if (pval<0.05)  geom_point(aes_string(shape="aud_rel"), size = 2, col = "black")
# geom_line(aes_string(x = vectx_modellist_lf[e],
#                      y = paste0("slpline_",as.character(e))),
#           col = "red", size = 2)
else geom_point(aes_string(shape="aud_rel"), size = 2, col = "black", alpha = 0.5)
} +{
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
scale_shape_manual(values=c(17, 16))+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' R^2 == ',signif(summary(pgls_models_list_lf[[e]])$r.squared,2)), hjust = -0.05, vjust = -0.1, parse = TRUE)+
annotate(geom = 'text', x = -Inf, y = -Inf, label = paste(' ',' P == ',signif(summary(pgls_models_list_lf[[e]])$coefficients[,4][[2]],2)), hjust = -0.05, vjust = -2.1, parse = TRUE)
ggtitle(categorylist_aud[e])
#geom_line(aes_string(x = vectxsimple[e],
#                     y = paste0("slpline_",as.character(e))),
#          col = "black", size = 2)
p
}
runplotpgls_aud_lf(1)
runplotpgls_aud_lf(1)+
runplotpgls_aud_lf(2)+
runplotpgls_aud_lf(3)+
runplotpgls_aud_lf(4)+
runplotpgls_aud_lf(5)+
runplotpgls_aud_lf(6)+
runplotpgls_aud_lf(7)+
runplotpgls_aud_lf(8)+
runplotpgls_aud_lf(9)+
runplotpgls_aud_lf(10)+
runplotpgls_aud_lf(11)+
runplotpgls_aud_lf(12)+
runplotpgls_aud_lf(13)+
runplotpgls_aud_lf(14)+plot_annotation(tag_levels = "A")
for(i in seq_along(vectxsimple_lf)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_hf[i][[1]]$model$coef[1]+
ok[,vectxsimple_lf[i]]*pgls_models_list_hf[i][[1]]$model$coef[2])
}
runplotpgls_aud_hf<-function(e){
pval<-summary(pgls_models_list_hf[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(paste0("P = ",
signif(summary(pgls_models_list_hf[[e]])$coefficients[,4][[2]],2),
",",
" R2 = ",signif(summary(pgls_models_list_hf[[e]])$r.squared,2))
,""),
hjust = c(-0.1,-0),
vjust = c(-1,-0)
)
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "log(HighHzlimit)"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+{
if (pval<0.05)  geom_point(aes_string(shape="aud_rel"), size = 2, col = "black")
# geom_line(aes_string(x = vectx_modellist_lf[e],
#                      y = paste0("slpline_",as.character(e))),
#           col = "red", size = 2)
else geom_point(aes_string(shape="aud_rel"), size = 2, col = "black", alpha = 0.5)
} +{
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
scale_shape_manual(values=c(17, 16))+
annotate(geom = 'text', x = Inf, y = -Inf, label = paste(' ',' R^2 == ',signif(summary(pgls_models_list_hf[[e]])$r.squared,2)), hjust = 0.99, vjust = -0.1, parse = TRUE)+
annotate(geom = 'text', x = Inf, y = -Inf, label = paste(' ',' P == ',signif(summary(pgls_models_list_hf[[e]])$coefficients[,4][[2]],2)), hjust = 0.99, vjust = -2.1, parse = TRUE)
ggtitle(categorylist_aud[e])
p
}
runplotpgls_aud_hf(1)
runplotpgls_aud_hf(1)+
runplotpgls_aud_hf(2)+
runplotpgls_aud_hf(3)+
runplotpgls_aud_hf(4)+
runplotpgls_aud_hf(5)+
runplotpgls_aud_hf(6)+
runplotpgls_aud_hf(7)+
runplotpgls_aud_hf(8)+
runplotpgls_aud_hf(9)+
runplotpgls_aud_hf(10)+
runplotpgls_aud_hf(11)+
runplotpgls_aud_hf(12)+
runplotpgls_aud_hf(13)+
runplotpgls_aud_hf(14)+plot_annotation(tag_levels = "A")
source("pgls_audiogram_bs.R")
#visualize the table better using the flextable package
flexall<-flextable(audiogrampgls_bs) %>% add_header_lines(
values = "Table X. Models for selection") %>%
bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
write.csv(audiogrampgls_bs,"audiogrampgls_bs.csv")
print(toprint,target = "audiogrampgls_bs.docx")
source("pgls_audiogram_lf.R")
#visualize the table better using the flextable package
flexall<-flextable(audiogrampgls_lf) %>% add_header_lines(
values = "Table X. Models for selection") %>%
bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
write.csv(audiogrampgls_lf,"audiogrampgls_lf.csv")
print(toprint,target = "audiogrampgls_lf.docx")
source("pgls_audiogram_hf.R")
#visualize the table better using the flextable package
flexall<-flextable(audiogrampgls_hf) %>% add_header_lines(
values = "Table X. Models for selection") %>%
bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
write.csv(audiogrampgls_hf,"audiogrampgls_hf.csv")
print(toprint,target = "audiogrampgls_hf.docx")
source("pgls_audiogram_bh.R")
#visualize the table better using the flextable package
flexall<-flextable(audiogrampgls_bh) %>% add_header_lines(
values = "Table X. Models for selection") %>%
bold(i = ~ P.val < 0.05) %>% # select columns add: j = ~ Coefficients + P.val
autofit()
flexall
write.csv(audiogrampgls_bh,"audiogrampgls_bh.csv")
print(toprint,target = "audiogrampgls_bh.docx")
View(df)
unique(df$Binomial[df$Status=="Scanned"])
unique(df$Binomial[df$Status!=="Scanned"])
unique(df$Binomial[df$Status!="Scanned"])
