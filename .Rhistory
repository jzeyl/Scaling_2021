limits$TM<-avgdf$TMtotalarea[match(limits$binomial,avgdf$Binomial)]
limits$HM<-avgdf$Head.mass..g.[match(limits$binomial,avgdf$Binomial)]
limits$bodymass<-avgdf$bodymass[match(limits$binomial,avgdf$Binomial)]
limits$ES<-avgdf$totalEClength[match(limits$binomial,avgdf$Binomial)]
limits$AR<-avgdf$area_ratio[match(limits$binomial,avgdf$Binomial)]
limits$TMangle<-avgdf$meanTMangle[match(limits$binomial,avgdf$Binomial)]
limits$coloffset<-avgdf$dis_coltip_TMcentroid[match(limits$binomial,avgdf$Binomial)]
limits$ECD<-avgdf$totalECDlength[match(limits$binomial,avgdf$Binomial)]
limits$collength<-avgdf$Columella.length.mm[match(limits$binomial,avgdf$Binomial)]
limits$colvol<-avgdf$Columella.volume.mm3[match(limits$binomial,avgdf$Binomial)]
limits$UH<-avgdf$Umbo_distancetoTMplane[match(limits$binomial,avgdf$Binomial)]
#limits$pPC1<-speciesPCAvalues$PC1[match(limits$binomial,speciesPCAvalues$Binomial)]
limits$rw_fp<-avgdf$rw_fp[match(limits$binomial,avgdf$Binomial)]
limits$ec_cl<-avgdf$EC_CL[match(limits$binomial,avgdf$Binomial)]
limits$rw_fp<-avgdf$rw_fp[match(limits$binomial,avgdf$Binomial)]
limits$col2.3_TM<-avgdf$col2.3_TM[match(limits$binomial,avgdf$Binomial)]
# cor plots
aud_data<- limits[,c("LowHzlimit","HighHzlimit","besthz","bestsensitivity")]
audlog<-aud_data %>% mutate_at(vars(c("LowHzlimit","HighHzlimit","besthz")),log)
library(PerformanceAnalytics)
chart.Correlation(audlog, histogram = TRUE, method = "pearson")
# p-values from correlation tests
cor.test(aud_data$LowHzlimit, aud_data$HighHzlimit)
cor.test(aud_data$LowHzlimit, aud_data$besthz)
cor.test(aud_data$LowHzlimit, aud_data$bestsensitivity)
cor.test(aud_data$HighHzlimit, aud_data$bestsensitivity)
#summary statistics of audiograms
mean(limits$HighHzlimit)
sd(limits$HighHzlimit)/sqrt(length(limits$HighHzlimit))
mean(limits$LowHzlimit)
sd(limits$LowHzlimit)/sqrt(length(limits$LowHzlimit))
mean(limits$besthz)
sd(limits$besthz)/sqrt(length(limits$besthz))
mean(limits$bestsensitivity)
sd(limits$bestsensitivity)/sqrt(length(limits$bestsensitivity))
###############PGLS MODELS BEST SENSITIVITY####################
modellist_bs<-c(
"bestsensitivity~log(air)",
"bestsensitivity~log(ES)",
"bestsensitivity~log(TMangle)",
"bestsensitivity~log(UH)",
"bestsensitivity~log(coloffset)",
"bestsensitivity~log(AR)",
"bestsensitivity~log(ECD)",
"bestsensitivity~log(TM)",
"bestsensitivity~log(FP)",
"bestsensitivity~log(RW)",
"bestsensitivity~log(HM)",
"bestsensitivity~log(bodymass)",
"bestsensitivity~log(collength)",
"bestsensitivity~log(colvol)")
#####################PGLS MODELS LOW HZ LIMIT#################
modellist_lf<-c(
"log(LowHzlimit)~log(air)",
"log(LowHzlimit)~log(ES)",
"log(LowHzlimit)~log(TMangle)",
"log(LowHzlimit)~log(UH)",
"log(LowHzlimit)~log(coloffset)",
"log(LowHzlimit)~log(AR)",
"log(LowHzlimit)~log(ECD)",
"log(LowHzlimit)~log(TM)",
"log(LowHzlimit)~log(FP)",
"log(LowHzlimit)~log(RW)",
"log(LowHzlimit)~log(HM)",
"log(LowHzlimit)~log(bodymass)",
"log(LowHzlimit)~log(collength)",
"log(LowHzlimit)~log(colvol)")
###################PGLS MODELS HIGH LIMIT##############
modellist_hf<-c(
"log(HighHzlimit)~log(air)",
"log(HighHzlimit)~log(ES)",
"log(HighHzlimit)~log(TMangle)",
"log(HighHzlimit)~log(UH)",
"log(HighHzlimit)~log(coloffset)",
"log(HighHzlimit)~log(AR)",
"log(HighHzlimit)~log(ECD)",
"log(HighHzlimit)~log(TM)",
"log(HighHzlimit)~log(FP)",
"log(HighHzlimit)~log(RW)",
"log(HighHzlimit)~log(HM)",
"log(HighHzlimit)~log(bodymass)",
"log(HighHzlimit)~log(collength)",
"log(HighHzlimit)~log(colvol)")
##################PGLS MODELS besthz###############
modellist_bh<-c(
"log(besthz)~log(air)",
"log(besthz)~log(ES)",
"log(besthz)~log(TMangle)",
"log(besthz)~log(UH)",
"log(besthz)~log(coloffset)",
"log(besthz)~log(AR)",
"log(besthz)~log(ECD)",
"log(besthz)~log(TM)",
"log(besthz)~log(FP)",
"log(besthz)~log(RW)",
"log(besthz)~log(HM)",
"log(besthz)~log(bodymass)",
"log(besthz)~log(collength)",
"log(besthz)~log(colvol)")
categorylist_lf<-c("Stiffness",
"Stiffness",
"Impedance match",
"Impedance match",
"Impedance match",
"Impedance match",
"Auditory endorgan length",
"Input/output areas",
"Input/output areas",
"Input/output areas",
"Animal size",
"Animal size",
"Columella size",
"Columella size")
categorylist_bs<-categorylist_lf
categorylist_bh<-categorylist_lf
categorylist_hf<-categorylist_lf
#only select the rows for which anatomical data is available for the corresponding audiograms
limitsanat<-limits[which(!is.na(limits$binomial)),]
#made data frame object
birdCDO<-comparative.data(phy = birdtreels,data = limitsanat,#[avgdf$Category!="Terrestrial",]
names.col =binomial,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
###########best sensitivity#################
source("pgls_audiogram_bs.R")
for(i in seq_along(vectxsimple_lf)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_bs[i][[1]]$model$coef[1]+
ok[,vectxsimple_lf[i]]*pgls_models_list_bs[i][[1]]$model$coef[2])
}
runplotpgls_aud_bs<-function(e){
pval<-summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(paste0("P = ",
signif(summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]],2),
",",
" R2 = ",signif(summary(pgls_models_list_bs[[e]])$r.squared,2))
,""),
hjust = c(-0.1,-0),
vjust = c(-1,-0)
)
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "bestsensitivity"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+{
if (pval<0.05)  geom_point(aes_string(), size = 2, col = "black")
# geom_line(aes_string(x = vectx_modellist_lf[e],
#                      y = paste0("slpline_",as.character(e))),
#           col = "red", size = 2)
else geom_point(aes_string(), size = 2, col = "black", alpha = 0.4)
} + {
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
hjust = hjust, vjust = vjust))+
ggtitle(categorylist_aud[e])
#geom_line(aes_string(x = vectxsimple[e],
#                     y = paste0("slpline_",as.character(e))),
#          col = "black", size = 2)
p
}
runplotpgls_aud_bs(1)
source("pgls_audiogram_lf.R")
source("pgls_audiogram_hf.R")
source("pgls_audiogram_bh.R")
runplotpgls_aud_bs(1)+
runplotpgls_aud_bs(2)+
runplotpgls_aud_bs(3)+
runplotpgls_aud_bs(4)+
runplotpgls_aud_bs(5)+
runplotpgls_aud_bs(6)+
runplotpgls_aud_bs(7)+
runplotpgls_aud_bs(8)+
runplotpgls_aud_bs(9)+
runplotpgls_aud_bs(10)+
runplotpgls_aud_bs(11)+
runplotpgls_aud_bs(12)+
runplotpgls_aud_bs(13)+plot_annotation(tag_levels = "A")
limits$TM<-avgdf$TMtotalarea[match(limits$binomial,avgdf$Binomial)]
limits$RW<-avgdf$RWtotalarea[match(limits$binomial,avgdf$Binomial)]
limits$FP<-avgdf$FPtotalarea[match(limits$binomial,avgdf$Binomial)]
limits$Air<-avgdf$Behind.TM[match(limits$binomial,avgdf$Binomial)]
limits$TM<-avgdf$TMtotalarea[match(limits$binomial,avgdf$Binomial)]
limits$HM<-avgdf$Head.mass..g.[match(limits$binomial,avgdf$Binomial)]
limits$BM<-avgdf$bodymass[match(limits$binomial,avgdf$Binomial)]
limits$ES<-avgdf$totalEClength[match(limits$binomial,avgdf$Binomial)]
limits$TM_FP<-avgdf$area_ratio[match(limits$binomial,avgdf$Binomial)]
limits$TMA<-avgdf$meanTMangle[match(limits$binomial,avgdf$Binomial)]
limits$COff<-avgdf$dis_coltip_TMcentroid[match(limits$binomial,avgdf$Binomial)]
limits$ECD<-avgdf$totalECDlength[match(limits$binomial,avgdf$Binomial)]
limits$CL<-avgdf$Columella.length.mm[match(limits$binomial,avgdf$Binomial)]
limits$CV<-avgdf$Columella.volume.mm3[match(limits$binomial,avgdf$Binomial)]
limits$UH<-avgdf$Umbo_distancetoTMplane[match(limits$binomial,avgdf$Binomial)]
modellist_bs<-c(
"bestsensitivity~log(air)",
"bestsensitivity~log(ES)",
"bestsensitivity~log(TMangle)",
"bestsensitivity~log(UH)",
"bestsensitivity~log(coloffset)",
"bestsensitivity~log(AR)",
"bestsensitivity~log(ECD)",
"bestsensitivity~log(TM)",
"bestsensitivity~log(FP)",
"bestsensitivity~log(RW)",
"bestsensitivity~log(HM)",
"bestsensitivity~log(bodymass)",
"bestsensitivity~log(collength)",
"bestsensitivity~log(colvol)")
#####################PGLS MODELS LOW HZ LIMIT#################
modellist_lf<-c(
"log(LowHzlimit)~log(air)",
"log(LowHzlimit)~log(ES)",
"log(LowHzlimit)~log(TMangle)",
"log(LowHzlimit)~log(UH)",
"log(LowHzlimit)~log(coloffset)",
"log(LowHzlimit)~log(AR)",
"log(LowHzlimit)~log(ECD)",
"log(LowHzlimit)~log(TM)",
"log(LowHzlimit)~log(FP)",
"log(LowHzlimit)~log(RW)",
"log(LowHzlimit)~log(HM)",
"log(LowHzlimit)~log(bodymass)",
"log(LowHzlimit)~log(collength)",
"log(LowHzlimit)~log(colvol)")
###################PGLS MODELS HIGH LIMIT##############
modellist_hf<-c(
"log(HighHzlimit)~log(air)",
"log(HighHzlimit)~log(ES)",
"log(HighHzlimit)~log(TMangle)",
"log(HighHzlimit)~log(UH)",
"log(HighHzlimit)~log(coloffset)",
"log(HighHzlimit)~log(AR)",
"log(HighHzlimit)~log(ECD)",
"log(HighHzlimit)~log(TM)",
"log(HighHzlimit)~log(FP)",
"log(HighHzlimit)~log(RW)",
"log(HighHzlimit)~log(HM)",
"log(HighHzlimit)~log(bodymass)",
"log(HighHzlimit)~log(collength)",
"log(HighHzlimit)~log(colvol)")
##################PGLS MODELS besthz###############
modellist_bh<-c(
"log(besthz)~log(air)",
"log(besthz)~log(ES)",
"log(besthz)~log(TMangle)",
"log(besthz)~log(UH)",
"log(besthz)~log(coloffset)",
"log(besthz)~log(AR)",
"log(besthz)~log(ECD)",
"log(besthz)~log(TM)",
"log(besthz)~log(FP)",
"log(besthz)~log(RW)",
"log(besthz)~log(HM)",
"log(besthz)~log(bodymass)",
"log(besthz)~log(collength)",
"log(besthz)~log(colvol)")
categorylist_lf<-c("Stiffness",
"Stiffness",
"Impedance match",
"Impedance match",
"Impedance match",
"Impedance match",
"Auditory endorgan length",
"Input/output areas",
"Input/output areas",
"Input/output areas",
"Animal size",
"Animal size",
"Columella size",
"Columella size")
categorylist_bs<-categorylist_lf
categorylist_bh<-categorylist_lf
categorylist_hf<-categorylist_lf
#only select the rows for which anatomical data is available for the corresponding audiograms
limitsanat<-limits[which(!is.na(limits$binomial)),]
#made data frame object
birdCDO<-comparative.data(phy = birdtreels,data = limitsanat,#[avgdf$Category!="Terrestrial",]
names.col =binomial,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
limitsanat<-limits[which(!is.na(limits$binomial)),]
#made data frame object
birdCDO<-comparative.data(phy = birdtreels,data = limitsanat,#[avgdf$Category!="Terrestrial",]
names.col =binomial,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
###########best sensitivity#################
source("pgls_audiogram_bs.R")
for(i in seq_along(vectxsimple_lf)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_bs[i][[1]]$model$coef[1]+
ok[,vectxsimple_lf[i]]*pgls_models_list_bs[i][[1]]$model$coef[2])
}
runplotpgls_aud_bs<-function(e){
pval<-summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(paste0("P = ",
signif(summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]],2),
",",
" R2 = ",signif(summary(pgls_models_list_bs[[e]])$r.squared,2))
,""),
hjust = c(-0.1,-0),
vjust = c(-1,-0)
)
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "bestsensitivity"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+{
if (pval<0.05)  geom_point(aes_string(), size = 2, col = "black")
# geom_line(aes_string(x = vectx_modellist_lf[e],
#                      y = paste0("slpline_",as.character(e))),
#           col = "red", size = 2)
else geom_point(aes_string(), size = 2, col = "black", alpha = 0.4)
} + {
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
hjust = hjust, vjust = vjust))+
ggtitle(categorylist_aud[e])
#geom_line(aes_string(x = vectxsimple[e],
#                     y = paste0("slpline_",as.character(e))),
#          col = "black", size = 2)
p
}
runplotpgls_aud_bs(1)
runplotpgls_aud_bs(1)+
runplotpgls_aud_bs(2)+
runplotpgls_aud_bs(3)+
runplotpgls_aud_bs(4)+
runplotpgls_aud_bs(5)+
runplotpgls_aud_bs(6)+
runplotpgls_aud_bs(7)+
runplotpgls_aud_bs(8)+
runplotpgls_aud_bs(9)+
runplotpgls_aud_bs(10)+
runplotpgls_aud_bs(11)+
runplotpgls_aud_bs(12)+
runplotpgls_aud_bs(13)+plot_annotation(tag_levels = "A")
vectxsimple_lf
modellist_hf
modellist_bs
modellist_bs<-c(
"bestsensitivity~log(Air)",
"bestsensitivity~log(ES)",
"bestsensitivity~log(TMA)",
"bestsensitivity~log(UH)",
"bestsensitivity~log(COffset)",
"bestsensitivity~log(TM_FP)",
"bestsensitivity~log(ECD)",
"bestsensitivity~log(TM)",
"bestsensitivity~log(FP)",
"bestsensitivity~log(RW)",
"bestsensitivity~log(HM)",
"bestsensitivity~log(BM)",
"bestsensitivity~log(CL)",
"bestsensitivity~log(CV)")
limitsanat<-limits[which(!is.na(limits$binomial)),]
#made data frame object
birdCDO<-comparative.data(phy = birdtreels,data = limitsanat,#[avgdf$Category!="Terrestrial",]
names.col =binomial,
vcv = TRUE, na.omit = F,
warn.dropped = TRUE)
#check any tips dropped between linking phylogeny and dataframe
birdCDO$dropped
source("pgls_audiogram_bs.R")
modellist_bs<-c(
"bestsensitivity~log(Air)",
"bestsensitivity~log(ES)",
"bestsensitivity~log(TMA)",
"bestsensitivity~log(UH)",
"bestsensitivity~log(COff)",
"bestsensitivity~log(TM_FP)",
"bestsensitivity~log(ECD)",
"bestsensitivity~log(TM)",
"bestsensitivity~log(FP)",
"bestsensitivity~log(RW)",
"bestsensitivity~log(HM)",
"bestsensitivity~log(BM)",
"bestsensitivity~log(CL)",
"bestsensitivity~log(CV)")
source("pgls_audiogram_bs.R")
modellist_bs
splt_modellist_bs<-strsplit(modellist_bs,"~")
splt_modellist_lf<-strsplit(modellist_lf,"~")
splt_modellist_bh<-strsplit(modellist_bh,"~")
splt_modellist_hf<-strsplit(modellist_hf,"~")
#different y
vecty_modellist_lf<-numeric()
for (i in seq_along(splt_modellist_lf)){
vecty_modellist_lf[i]<-splt_modellist_lf[[i]][1]
}
vecty_modellist_lf
vecty_modellist_bh<-numeric()
for (i in seq_along(splt_modellist_bh)){
vecty_modellist_bh[i]<-splt_modellist_bh[[i]][1]
}
vecty_modellist_bh
vecty_modellist_hf<-numeric()
for (i in seq_along(splt_modellist_hf)){
vecty_modellist_hf[i]<-splt_modellist_hf[[i]][1]
}
vecty_modellist_hf
#all x variables
vectx_modellist_lf<-numeric()
for (i in seq_along(modellist_lf)){
vectx_modellist_lf[i]<-splt_modellist_lf[[i]][2]
}
vectx_modellist_lf
# remove variable from within log
vectxsimple_lf<-numeric()
for(i in seq_along(vectx_modellist_lf)){
vectxsimple_lf[i]<-gsub("[\\(\\)]", "", regmatches(vectx_modellist_lf, gregexpr("\\(.*?\\)", vectx_modellist_lf))[[i]])
}
#log transform anatomy data for the slope line
ok<-limits%>% mutate_at(vectxsimple_lf,log)
okselect<-ok[,vectxsimple_lf]
for(i in seq_along(vectxsimple_lf)){
assign(paste0("slpline","_",as.character(i)),pgls_models_list_bs[i][[1]]$model$coef[1]+
ok[,vectxsimple_lf[i]]*pgls_models_list_bs[i][[1]]$model$coef[2])
}
runplotpgls_aud_bs<-function(e){
pval<-summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]]
lbl<-data.frame(
xpos = c(-Inf,-Inf),
ypos = c(-Inf,-Inf),
annotateText = c(paste0("P = ",
signif(summary(pgls_models_list_bs[[e]])$coefficients[,4][[2]],2),
",",
" R2 = ",signif(summary(pgls_models_list_bs[[e]])$r.squared,2))
,""),
hjust = c(-0.1,-0),
vjust = c(-1,-0)
)
p<-ggplot(limits,
aes_string(x = vectx_modellist_lf[e], y = "bestsensitivity"))+
theme_classic()+
theme(legend.position = "none",
axis.text.y = element_blank(),
axis.title.y = element_blank())+{
if (pval<0.05)  geom_point(aes_string(), size = 2, col = "black")
# geom_line(aes_string(x = vectx_modellist_lf[e],
#                      y = paste0("slpline_",as.character(e))),
#           col = "red", size = 2)
else geom_point(aes_string(), size = 2, col = "black", alpha = 0.4)
} + {
if (pval<0.05)  geom_line(aes_string(x = vectx_modellist_lf[e],
y = paste0("slpline_",as.character(e))),
col = "black", size = 2)
}+
geom_text(data = lbl,aes(x = xpos, y = ypos, label = annotateText,
hjust = hjust, vjust = vjust))+
ggtitle(categorylist_aud[e])
#geom_line(aes_string(x = vectxsimple[e],
#                     y = paste0("slpline_",as.character(e))),
#          col = "black", size = 2)
p
}
runplotpgls_aud_bs(1)
runplotpgls_aud_bs(1)+
runplotpgls_aud_bs(2)+
runplotpgls_aud_bs(3)+
runplotpgls_aud_bs(4)+
runplotpgls_aud_bs(5)+
runplotpgls_aud_bs(6)+
runplotpgls_aud_bs(7)+
runplotpgls_aud_bs(8)+
runplotpgls_aud_bs(9)+
runplotpgls_aud_bs(10)+
runplotpgls_aud_bs(11)+
runplotpgls_aud_bs(12)+
runplotpgls_aud_bs(13)+plot_annotation(tag_levels = "A")
modellist_bs
splt_modellist_bs<-strsplit(modellist_bs,"~")
splt_modellist_bs
vectx_modellist_lf<-numeric()
for (i in seq_along(modellist_bs)){
vectx_modellist_lf[i]<-splt_modellist_bs[[i]][2]
}
vectx_modellist_lf
# remove variable from within log
vectxsimple_lf<-numeric()
for(i in seq_along(vectx_modellist_lf)){
vectxsimple_lf[i]<-gsub("[\\(\\)]", "", regmatches(vectx_modellist_lf, gregexpr("\\(.*?\\)", vectx_modellist_lf))[[i]])
}
runplotpgls_aud_bs(1)
runplotpgls_aud_bs(1)+
runplotpgls_aud_bs(2)+
runplotpgls_aud_bs(3)+
runplotpgls_aud_bs(4)+
runplotpgls_aud_bs(5)+
runplotpgls_aud_bs(6)+
runplotpgls_aud_bs(7)+
runplotpgls_aud_bs(8)+
runplotpgls_aud_bs(9)+
runplotpgls_aud_bs(10)+
runplotpgls_aud_bs(11)+
runplotpgls_aud_bs(12)+
runplotpgls_aud_bs(13)+plot_annotation(tag_levels = "A")
